set serveroutput on;
set autocommit on;

CREATE TABLE TODAY_DEPOSIT(
    TRANSDATETIME TIMESTAMP, 
    ACCTNO        VARCHAR2(11),
    ACCT_TYPE     VARCHAR2(10),
    AMOUNT        NUMBER);

INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'CREDIT', SYSDATE, 260, 'atm deposit','A000002');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'CREDIT', SYSDATE, 400, 'atm deposit','A000002');

--PART 1B QUESTION 1. 
CREATE OR REPLACE PROCEDURE ADD_TODAYS_DEPOSIT IS
    C_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
    C_ACCTNO DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
    C_ACCT_TYPE VARCHAR2(10):= 'CREDIT';
    C_AMOUNT DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;

    CURSOR C_DEPOSIT_ACCT_TRANSACTION IS
        SELECT TRANSDATETIME, ACCTNO, AMOUNT
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE UPPER(TRANSTYPE)='CREDIT'
        AND TO_CHAR(TRANSDATETIME,'MMDDYYYY') = TO_CHAR(SYSDATE,'MMDDYYYY');

BEGIN
    OPEN C_DEPOSIT_ACCT_TRANSACTION;
    LOOP
        FETCH C_DEPOSIT_ACCT_TRANSACTION INTO C_TRANSDATETIME, C_ACCTNO, C_AMOUNT;
        EXIT WHEN C_DEPOSIT_ACCT_TRANSACTION%NOTFOUND;
        INSERT INTO TODAY_DEPOSIT VALUES(C_TRANSDATETIME, C_ACCTNO,C_ACCT_TYPE, C_AMOUNT);
    END LOOP;
    CLOSE C_DEPOSIT_ACCT_TRANSACTION;
END;
/

EXEC ADD_TODAYS_DEPOSIT;
--DELETE FROM TODAY_DEPOSIT;
SELECT * FROM TODAY_DEPOSIT;

--PART 1B QUESTION 2
CREATE TABLE TODAY_WITHDRAW(
    TRANSDATETIME TIMESTAMP, 
    ACCTNO        VARCHAR2(11),
    ACCT_TYPE     VARCHAR2(10),
    AMOUNT        NUMBER);

INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'DEBIT', SYSDATE, 120, 'atm withdrawal','A000002');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'DEBIT', SYSDATE, 40, 'atm withdrawal','A000002');


CREATE OR REPLACE PROCEDURE ADD_TODAYS_WITHDRAW IS
    C_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
    C_ACCTNO DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
    C_ACCT_TYPE VARCHAR2(10):= 'DEBIT';
    C_AMOUNT DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;

    CURSOR C_DEPOSIT_ACCT_TRANSACTION IS
        SELECT TRANSDATETIME, ACCTNO, AMOUNT
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE UPPER(TRANSTYPE)='DEBIT'
        AND TO_CHAR(TRANSDATETIME,'MMDDYYYY') = TO_CHAR(SYSDATE,'MMDDYYYY');

BEGIN
    OPEN C_DEPOSIT_ACCT_TRANSACTION;
    LOOP
        FETCH C_DEPOSIT_ACCT_TRANSACTION INTO C_TRANSDATETIME, C_ACCTNO, C_AMOUNT;
        EXIT WHEN C_DEPOSIT_ACCT_TRANSACTION%NOTFOUND;
        INSERT INTO TODAY_WITHDRAW VALUES(C_TRANSDATETIME, C_ACCTNO,C_ACCT_TYPE, C_AMOUNT);
    END LOOP;
    CLOSE C_DEPOSIT_ACCT_TRANSACTION;
END;
/

EXEC ADD_TODAYS_WITHDRAW;
--DELETE FROM TODAY_WITHDRAW;
SELECT * FROM TODAY_WITHDRAW;

--QUESTION 3
-- I WILL USE TIMESTAMP INSTEAD OF DATE DESCRIBED IN QUESTION THREE, AS IT PROVIDES MORE INFORMATION
CREATE TABLE TRANSACTION_LOG(
    FROM_ACCT VARCHAR2(11),
    TO_ACCT   VARCHAR2(11),
    AMOUNT    NUMBER,
    T_DATE    TIMESTAMP);

    
CREATE OR REPLACE PROCEDURE ACCT_TRANSFER(FROM_ACCT_PROC VARCHAR2,TO_ACCT_PROC VARCHAR2, PROC_AMOUNT NUMBER) AS
    PROC_DATE               TIMESTAMP:=SYSDATE;
    FROM_CHECK              DEPOSIT_ACCT%ROWTYPE;
    TO_CHECK                DEPOSIT_ACCT%ROWTYPE;
    E_CheckAcctNumsExist    EXCEPTION;
    E_AmountMustBePositive  EXCEPTION;

BEGIN
    SELECT * --to ensure that the account number exists AND throw error if not
    INTO FROM_CHECK
    FROM DEPOSIT_ACCT
    WHERE ACCTNO = FROM_ACCT_PROC;
    
    SELECT * -- same as above
    INTO TO_CHECK
    FROM DEPOSIT_ACCT
    WHERE ACCTNO = TO_ACCT_PROC;
    
    IF PROC_AMOUNT <= 0 THEN 
        RAISE E_AMOUNTMUSTBEPOSITIVE;
    END IF;

    UPDATE DEPOSIT_ACCT -- UPDATE THE SENDING ACCOUNT BY SUBTRACTING THE BALANCE
    SET BALANCE = BALANCE - PROC_AMOUNT
    WHERE ACCTNO = FROM_ACCT_PROC;
    
    UPDATE DEPOSIT_ACCT -- UPDATE THE RECIEVING ACCOUNT BY ADDING THE BALANCE
    SET BALANCE = BALANCE + PROC_AMOUNT
    WHERE ACCTNO = TO_ACCT_PROC;
    
    INSERT INTO TRANSACTION_LOG (FROM_ACCT,TO_ACCT, AMOUNT, T_DATE)
    VALUES(FROM_ACCT_PROC,TO_ACCT_PROC, PROC_AMOUNT, PROC_DATE); 
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        --ROLLBACK;
    WHEN E_AMOUNTMUSTBEPOSITIVE THEN
        DBMS_OUTPUT.PUT_LINE('You can only transfer a positive amount.');       
END;
/
EXEC ACCT_TRANSFER('CDEP000001', 'CDEP000002', 20)
-- TEST FOR ERROR HANDLING ON INCORRECT ACCOUNT NUMBER
EXEC ACCT_TRANSFER('CDEP000001', 'CDEP000005', 20)
--TEST FOR ERROR WITH NEGATIVE AMOUNT
EXEC ACCT_TRANSFER('CDEP000001', 'CDEP000002', -20)

SELECT SYSDATE + 15 FROM DUAL;

--Question 4. 
CREATE TABLE B_C_FILE(
    FNAME      VARCHAR2(50),
    LNAME      VARCHAR2(50),
    STREET      VARCHAR2(50),
    CITY        VARCHAR2(50),
    STATE       VARCHAR2(2),
    ZIP         NUMBER,
    DOB         DATE);

INSERT INTO CUSTOMER (CUSTID,SSN,FNAME,LNAME,DOB,STREET,CITY,STATE,ZIP)
    VALUES(9900000004,555667777,'Joss', 'Whedons', '12-JUN-20', '123 Joshua Tree St.', 'Palm Springs', 'CA', 94321);

CREATE OR REPLACE PROCEDURE BIRTHDAY_SUB AS
    C_FNAME      CUSTOMER.FNAME%TYPE;
    C_LNAME      CUSTOMER.LNAME%TYPE;
    C_STREET     CUSTOMER.STREET%TYPE;
    C_CITY       CUSTOMER.CITY%TYPE;
    C_STATE      CUSTOMER.STATE%TYPE;
    C_ZIP        CUSTOMER.ZIP%TYPE;
    C_DOB        CUSTOMER.DOB%TYPE;
        
    CURSOR BDAY_IN_15DAYS IS
    SELECT FNAME, LNAME, STREET, CITY, STATE, ZIP, DOB
    FROM CUSTOMER
    WHERE DOB = TO_CHAR(SYSDATE + 15,'DD-MON-YY');

BEGIN
    OPEN BDAY_IN_15DAYS;
    LOOP
        FETCH BDAY_IN_15DAYS INTO C_FNAME, C_LNAME, C_STREET, C_CITY, C_STATE, C_ZIP, C_DOB;
        EXIT WHEN BDAY_IN_15DAYS%NOTFOUND;
        INSERT INTO B_C_FILE VALUES(C_FNAME, C_LNAME, C_STREET, C_CITY, C_STATE, C_ZIP, C_DOB);
    END LOOP;
    CLOSE BDAY_IN_15DAYS;
END;
/

EXEC BIRTHDAY_SUB;
SELECT * FROM B_C_FILE;

SELECT * FROM TRANSACTION_LOG;
SELECT * FROM DEPOSIT_ACCT;
SELECT * FROM BRANCH_DRIVERS;
SELECT * FROM DRIVER;
SELECT * FROM BRANCH_PRODUCTIVITY_COST;
SELECT * FROM BRANCH_STATS;
SELECT* FROM BRANCH_DEPOSIT_TRANSACTIONS;
SELECT * FROM employee_info;
select * from intermediate_view;
select * from intermediate_TWO;
select * from branch_manager;
select * from branch;
SELECT * FROM CD_ACCOUNT;
SELECT * FROM DEPARTMENT;
SELECT * FROM DEPOSIT_ACCT_PRODUCT;
SELECT * FROM BRANCH_ACCESS_POINTS;
SELECT * FROM JOB;
select * from bank_employee;
select * from branch_employee;
select * from emp_annual_data;
SELECT * FROM BRANCH_SALARY_INFO;
SELECT * FROM EMPLOYEE_SALARY;
SELECT * FROM NUM_OF_BRANCH_EMPS;
SELECT * FROM ACCESS_POINT_TRANSACTION_TOTAL;
SELECT * FROM BRANCH_TRANSACTION_TOTAL;
SELECT * FROM BRANCH_INFO;
SELECT * FROM LOAN_PAYMENT;
SELECT * FROM LOAN;
SELECT * FROM DEPOSIT_ACCT_TRANSACTION;
SELECT * FROM CREDIT_ACCT_TRANSACTION;
SELECT * FROM CREDIT_ACCOUNT;
SELECT * FROM CUSTOMER;

--cr86trTqAU3DViG