set serveroutput on;
set autocommit on;

-------------------------------------------------
EXCEPTION
		WHEN VALUE_ERROR THEN					
			DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
        WHEN ZERO_DIVIDE THEN
			DBMS_OUTPUT.PUT_LINE('Divide by zero');
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
            INSERT INTO ERR_LOG VALUES('ACCT_TRANSFER', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
            INSERT INTO ERR_LOG VALUES('ACCT_TRANSFER', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80));  
----------------------------------------------------
CREATE TABLE TODAY_DEPOSIT(
    TRANSDATETIME TIMESTAMP, 
    ACCTNO        VARCHAR2(11),
    ACCT_TYPE     VARCHAR2(10),
    AMOUNT        NUMBER);

INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'CREDIT', SYSDATE, 260, 'atm deposit','A000002');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'CREDIT', SYSDATE, 400, 'atm deposit','A000002');

--PART 1B QUESTION 1. 
CREATE OR REPLACE PROCEDURE ADD_TODAYS_DEPOSIT IS
    C_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
    C_ACCTNO DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
    C_ACCT_TYPE VARCHAR2(10):= 'CREDIT';
    C_AMOUNT DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;

    CURSOR C_DEPOSIT_ACCT_TRANSACTION IS
        SELECT TRANSDATETIME, ACCTNO, AMOUNT
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE UPPER(TRANSTYPE)='CREDIT'
        AND TO_CHAR(TRANSDATETIME,'MMDDYYYY') = TO_CHAR(SYSDATE,'MMDDYYYY');

BEGIN
    OPEN C_DEPOSIT_ACCT_TRANSACTION;
    LOOP
        FETCH C_DEPOSIT_ACCT_TRANSACTION INTO C_TRANSDATETIME, C_ACCTNO, C_AMOUNT;
        EXIT WHEN C_DEPOSIT_ACCT_TRANSACTION%NOTFOUND;
        INSERT INTO TODAY_DEPOSIT VALUES(C_TRANSDATETIME, C_ACCTNO,C_ACCT_TYPE, C_AMOUNT);
    END LOOP;
    CLOSE C_DEPOSIT_ACCT_TRANSACTION;
EXCEPTION
		WHEN VALUE_ERROR THEN					
			DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('ADD_TODAYS_DEPOSIT', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
            INSERT INTO ERR_LOG VALUES('ADD_TODAYS_DEPOSIT', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
            INSERT INTO ERR_LOG VALUES('ADD_TODAYS_DEPOSIT', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('ADD_TODAYS_DEPOSIT', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('ADD_TODAYS_DEPOSIT', NULL, SYSDATE, NULL, NULL);
END;
/

EXEC ADD_TODAYS_DEPOSIT;
--DELETE FROM TODAY_DEPOSIT;
SELECT * FROM TODAY_DEPOSIT;

--PART 1B QUESTION 2
CREATE TABLE TODAY_WITHDRAW(
    TRANSDATETIME TIMESTAMP, 
    ACCTNO        VARCHAR2(11),
    ACCT_TYPE     VARCHAR2(10),
    AMOUNT        NUMBER);

INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'DEBIT', SYSDATE, 120, 'atm withdrawal','A000002');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'DEBIT', SYSDATE, 40, 'atm withdrawal','A000002');


CREATE OR REPLACE PROCEDURE ADD_TODAYS_WITHDRAW IS
    C_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
    C_ACCTNO DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
    C_ACCT_TYPE VARCHAR2(10):= 'DEBIT';
    C_AMOUNT DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;

    CURSOR C_DEPOSIT_ACCT_TRANSACTION IS
        SELECT TRANSDATETIME, ACCTNO, AMOUNT
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE UPPER(TRANSTYPE)='DEBIT'
        AND TO_CHAR(TRANSDATETIME,'MMDDYYYY') = TO_CHAR(SYSDATE,'MMDDYYYY');

BEGIN
    OPEN C_DEPOSIT_ACCT_TRANSACTION;
    LOOP
        FETCH C_DEPOSIT_ACCT_TRANSACTION INTO C_TRANSDATETIME, C_ACCTNO, C_AMOUNT;
        EXIT WHEN C_DEPOSIT_ACCT_TRANSACTION%NOTFOUND;
        INSERT INTO TODAY_WITHDRAW VALUES(C_TRANSDATETIME, C_ACCTNO,C_ACCT_TYPE, C_AMOUNT);
    END LOOP;
    CLOSE C_DEPOSIT_ACCT_TRANSACTION;
EXCEPTION
		WHEN VALUE_ERROR THEN					
			DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('ADD_TODAYS_WITHDRAW', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
            INSERT INTO ERR_LOG VALUES('ADD_TODAYS_WITHDRAW', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
            INSERT INTO ERR_LOG VALUES('ADD_TODAYS_WITHDRAW', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('ADD_TODAYS_WITHDRAW', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('ADD_TODAYS_WITHDRAW', NULL, SYSDATE, NULL, NULL);
END;
/

EXEC ADD_TODAYS_WITHDRAW;
--DELETE FROM TODAY_WITHDRAW;
SELECT * FROM TODAY_WITHDRAW;

--QUESTION 3
-- I WILL USE TIMESTAMP INSTEAD OF DATE DESCRIBED IN QUESTION THREE, AS IT PROVIDES MORE INFORMATION
CREATE TABLE TRANSACTION_LOG(
    FROM_ACCT VARCHAR2(11),
    TO_ACCT   VARCHAR2(11),
    AMOUNT    NUMBER,
    T_DATE    TIMESTAMP);

    
CREATE OR REPLACE PROCEDURE ACCT_TRANSFER(FROM_ACCT_PROC VARCHAR2,TO_ACCT_PROC VARCHAR2, PROC_AMOUNT NUMBER) AS
    PROC_DATE               TIMESTAMP:=SYSDATE;
    FROM_CHECK              DEPOSIT_ACCT%ROWTYPE;
    TO_CHECK                DEPOSIT_ACCT%ROWTYPE;
    E_CheckAcctNumsExist    EXCEPTION;
    E_AmountMustBePositive  EXCEPTION;

BEGIN
    SELECT * --to ensure that the account number exists AND throw error if not
    INTO FROM_CHECK
    FROM DEPOSIT_ACCT
    WHERE ACCTNO = FROM_ACCT_PROC;
    
    SELECT * -- same as above
    INTO TO_CHECK
    FROM DEPOSIT_ACCT
    WHERE ACCTNO = TO_ACCT_PROC;
    
    IF PROC_AMOUNT <= 0 THEN 
        RAISE E_AMOUNTMUSTBEPOSITIVE;
    END IF;

    UPDATE DEPOSIT_ACCT -- UPDATE THE SENDING ACCOUNT BY SUBTRACTING THE BALANCE
    SET BALANCE = BALANCE - PROC_AMOUNT
    WHERE ACCTNO = FROM_ACCT_PROC;
    
    UPDATE DEPOSIT_ACCT -- UPDATE THE RECIEVING ACCOUNT BY ADDING THE BALANCE
    SET BALANCE = BALANCE + PROC_AMOUNT
    WHERE ACCTNO = TO_ACCT_PROC;
    
    INSERT INTO TRANSACTION_LOG (FROM_ACCT,TO_ACCT, AMOUNT, T_DATE)
    VALUES(FROM_ACCT_PROC,TO_ACCT_PROC, PROC_AMOUNT, PROC_DATE); 
EXCEPTION
    WHEN VALUE_ERROR THEN					
        DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
        INSERT INTO ERR_LOG VALUES('ACCT_TRANSFER', NULL, SYSDATE, NULL, NULL);
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('ACCT_TRANSFER', NULL, SYSDATE, NULL, NULL);
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('ACCT_TRANSFER', NULL, SYSDATE, NULL, NULL);
    WHEN OTHERS THEN
        IF SQL%NOTFOUND THEN
           DBMS_OUTPUT.PUT_LINE('No such record was found');
           INSERT INTO ERR_LOG VALUES('ACCT_TRANSFER', NULL, SYSDATE, NULL, NULL);
        END IF;
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('ACCT_TRANSFER', NULL, SYSDATE, NULL, NULL);    
END;
/
EXEC ACCT_TRANSFER('CDEP000001', 'CDEP000002', 20)
-- TEST FOR ERROR HANDLING ON INCORRECT ACCOUNT NUMBER
EXEC ACCT_TRANSFER('CDEP000001', 'CDEP000005', 20)
--TEST FOR ERROR WITH NEGATIVE AMOUNT
EXEC ACCT_TRANSFER('CDEP000001', 'CDEP000002', -20)

SELECT SYSDATE + 15 FROM DUAL;

--Question 4. 
CREATE TABLE B_C_FILE(
    FNAME      VARCHAR2(50),
    LNAME      VARCHAR2(50),
    STREET      VARCHAR2(50),
    CITY        VARCHAR2(50),
    STATE       VARCHAR2(2),
    ZIP         NUMBER,
    DOB         DATE);

INSERT INTO CUSTOMER (CUSTID,SSN,FNAME,LNAME,DOB,STREET,CITY,STATE,ZIP)
    VALUES(9900000004,555667777,'Joss', 'Whedons', '12-JUN-20', '123 Joshua Tree St.', 'Palm Springs', 'CA', 94321);

CREATE OR REPLACE PROCEDURE BIRTHDAY_SUB AS
    C_FNAME      CUSTOMER.FNAME%TYPE;
    C_LNAME      CUSTOMER.LNAME%TYPE;
    C_STREET     CUSTOMER.STREET%TYPE;
    C_CITY       CUSTOMER.CITY%TYPE;
    C_STATE      CUSTOMER.STATE%TYPE;
    C_ZIP        CUSTOMER.ZIP%TYPE;
    C_DOB        CUSTOMER.DOB%TYPE;
        
    CURSOR BDAY_IN_15DAYS IS
    SELECT FNAME, LNAME, STREET, CITY, STATE, ZIP, DOB
    FROM CUSTOMER
    WHERE DOB = TO_CHAR(SYSDATE + 15,'DD-MON-YY');

BEGIN
    OPEN BDAY_IN_15DAYS;
    LOOP
        FETCH BDAY_IN_15DAYS INTO C_FNAME, C_LNAME, C_STREET, C_CITY, C_STATE, C_ZIP, C_DOB;
        EXIT WHEN BDAY_IN_15DAYS%NOTFOUND;
        INSERT INTO B_C_FILE VALUES(C_FNAME, C_LNAME, C_STREET, C_CITY, C_STATE, C_ZIP, C_DOB);
    END LOOP;
    CLOSE BDAY_IN_15DAYS;
EXCEPTION
    WHEN VALUE_ERROR THEN					
        DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
        INSERT INTO ERR_LOG VALUES('BIRTHDAY_SUB', NULL, SYSDATE, NULL, NULL);
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('BIRTHDAY_SUB', NULL, SYSDATE, NULL, NULL);
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('BIRTHDAY_SUB', NULL, SYSDATE, NULL, NULL);
    WHEN OTHERS THEN
        IF SQL%NOTFOUND THEN
           DBMS_OUTPUT.PUT_LINE('No such record was found');
           INSERT INTO ERR_LOG VALUES('BIRTHDAY_SUB', NULL, SYSDATE, NULL, NULL);
        END IF;
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('BIRTHDAY_SUB', NULL, SYSDATE, NULL, NULL);    
END;
/

EXEC BIRTHDAY_SUB;
SELECT * FROM B_C_FILE;

-- Question 5
CREATE OR REPLACE FUNCTION CUSTOMERINFO(ACCTNO_INPUT VARCHAR2) RETURN NUMBER AS
    TOTAL_DEPOSIT NUMBER;
BEGIN
    SELECT SUM(AMOUNT)
    INTO TOTAL_DEPOSIT
    FROM DEPOSIT_ACCT_TRANSACTION
    WHERE ACCTNO = ACCTNO_INPUT
    AND TRANSTYPE = 'CREDIT';
    IF TOTAL_DEPOSIT IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('No data has been found, check that your account number is correct.');
    END IF;
    RETURN TOTAL_DEPOSIT;
EXCEPTION
    WHEN VALUE_ERROR THEN					
        DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
        INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(single input)', NULL, SYSDATE, NULL, NULL);
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(single input)', NULL, SYSDATE, NULL, NULL);
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(single input)', NULL, SYSDATE, NULL, NULL);
    WHEN OTHERS THEN
        IF SQL%NOTFOUND THEN
           DBMS_OUTPUT.PUT_LINE('No such record was found');
           INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(single input)', NULL, SYSDATE, NULL, NULL);
        END IF;
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(single input)', NULL, SYSDATE, NULL, NULL);  
END;    
/
DECLARE 
    I NUMBER;
BEGIN 
    SELECT customerinfo(1) INTO I from dual;
END;
/
SELECT CUSTOMERINFO('CDEP000001') FROM DUAL;

-- Question 6
CREATE OR REPLACE FUNCTION CUSTOMERINFO(ACCTNO_INPUT VARCHAR2, DATE_INPUT VARCHAR2) RETURN NUMBER AS
    TOTAL_DEPOSIT NUMBER;
    INPUT_DATE    VARCHAR2(20);
BEGIN
    INPUT_DATE:=TO_CHAR(TO_DATE('03-DEC-19','DD-MM-YY'), 'DD-MM-YY');

    SELECT SUM(AMOUNT)
    INTO TOTAL_DEPOSIT
    FROM DEPOSIT_ACCT_TRANSACTION
    WHERE ACCTNO = ACCTNO_INPUT
    AND UPPER(TRANSTYPE) = 'CREDIT'
    AND INPUT_DATE = TO_CHAR(TRANSDATETIME,'DD-MM-YY');
    RETURN TOTAL_DEPOSIT;
EXCEPTION
    WHEN VALUE_ERROR THEN					
        DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
        INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);
    WHEN OTHERS THEN
        IF SQL%NOTFOUND THEN
           DBMS_OUTPUT.PUT_LINE('No such record was found');
           INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);
        END IF;
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);  
END;    
/

SELECT CUSTOMERINFO('CDEP000001','03-DEC-19') FROM DUAL;
SELECT CUSTOMERINFO('CDEP000001','03/12/19') FROM DUAL;
SELECT CUSTOMERINFO(1,'jojo',2) FROM DUAL;
DECLARE 
    I NUMBER;
BEGIN SELECT customerinfo(1,'df') INTO I from dual;
END;
/
select * from err_log;
-- Question 7

UPDATE DEPOSIT_ACCT
SET COOWNER = 9900000004
WHERE ACCTNO = 'CDEP000001';


CREATE OR REPLACE FUNCTION CUSTOMERINFO(PRIMARY_ACCT NUMBER, DATE_INPUT VARCHAR2, CO_OWNER_INPUT NUMBER) RETURN NUMBER AS
    TOTAL_DEPOSIT NUMBER;
    INPUT_DATE    VARCHAR2(20);
    ACCT_NUM      CHAR(10);

BEGIN
    INPUT_DATE:=TO_CHAR(TO_DATE('03-DEC-19','DD-MM-YY'), 'DD-MM-YY');

    SELECT ACCTNO
    INTO ACCT_NUM
    FROM DEPOSIT_ACCT
    WHERE PRIMARY = PRIMARY_ACCT
    AND COOWNER = CO_OWNER_INPUT;
    
    SELECT SUM(AMOUNT)
    INTO TOTAL_DEPOSIT
    FROM DEPOSIT_ACCT_TRANSACTION
    WHERE ACCTNO = ACCT_NUM
    AND UPPER(TRANSTYPE) = 'CREDIT'
    AND INPUT_DATE = TO_CHAR(TRANSDATETIME,'DD-MM-YY');
    RETURN TOTAL_DEPOSIT;
EXCEPTION
    WHEN VALUE_ERROR THEN					
        DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
        INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);
    WHEN OTHERS THEN
        IF SQL%NOTFOUND THEN
           DBMS_OUTPUT.PUT_LINE('No such record was found');
           INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);
        END IF;
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('CUSTOMERINFO(double input)', NULL, SYSDATE, NULL, NULL);  
END;    
/

select customerinfo(9900000001, '03/12/19',9900000004) from dual;

--Question 8
CREATE OR REPLACE PROCEDURE LAST10(CUSTOMERID NUMBER) IS
    RETURNED_ROW    DEPOSIT_ACCT_TRANSACTION%ROWTYPE;
    ACCT_NUM        CHAR(10);
    
    CURSOR C_DEPOSIT_ACCT_TRANSACTION IS
        SELECT *
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM
        AND ROWNUM <= 10
        ORDER BY TRANSDATETIME DESC;

BEGIN
    SELECT ACCTNO
    INTO ACCT_NUM
    FROM DEPOSIT_ACCT
    WHERE PRIMARY = CUSTOMERID;

    OPEN C_DEPOSIT_ACCT_TRANSACTION;
    LOOP
        FETCH C_DEPOSIT_ACCT_TRANSACTION INTO RETURNED_ROW;
        EXIT WHEN C_DEPOSIT_ACCT_TRANSACTION%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(RETURNED_ROW.TRANSID||' '||RETURNED_ROW.ACCTNO||' '||RETURNED_ROW.TRANSTYPE||' '||
        RETURNED_ROW.TRANSDATETIME||' '||RETURNED_ROW.AMOUNT||' '||RETURNED_ROW.DESCRIPTION||' '||RETURNED_ROW.ACCESSPTID);
    END LOOP;
    CLOSE C_DEPOSIT_ACCT_TRANSACTION;
EXCEPTION
    WHEN VALUE_ERROR THEN					
        DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
        INSERT INTO ERR_LOG VALUES('Last10', NULL, SYSDATE, NULL, NULL);
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('Last10', NULL, SYSDATE, NULL, NULL);
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        INSERT INTO ERR_LOG VALUES('Last10', NULL, SYSDATE, NULL, NULL);
    WHEN OTHERS THEN
        IF SQL%NOTFOUND THEN
           DBMS_OUTPUT.PUT_LINE('No such record was found');
           INSERT INTO ERR_LOG VALUES('Last10', NULL, SYSDATE, NULL, NULL);
        END IF;
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('Last10', NULL, SYSDATE, NULL, NULL);  
END;
/

EXEC LAST10(9900000001);

--Question 9
CREATE OR REPLACE PACKAGE BANKP AS
    FUNCTION CURRENT_BAL (CUSTOMER_ID NUMBER) RETURN NUMBER;
    FUNCTION LAST_DEPOSIT (CUSTOMER_ID NUMBER) RETURN NUMBER;
    FUNCTION LAST_SAVINGS_DEPOSIT (CUSTOMER_ID NUMBER) RETURN NUMBER;
    FUNCTION LAST_WITHDRAWAL (CUSTOMER_ID NUMBER) RETURN NUMBER;
    FUNCTION LAST_SAVINGS_WITHDRAWAL (CUSTOMER_ID NUMBER) RETURN NUMBER;  
END BANKP;
/
--CREATE PACKAGE BODY FOR BANKP
CREATE OR REPLACE PACKAGE BODY BANKP AS
--Q9 P1
    FUNCTION CURRENT_BAL (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        BALANCE_OUTPUT NUMBER;
    BEGIN
        SELECT BALANCE
        INTO BALANCE_OUTPUT
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'INTCK';
        RETURN BALANCE_OUTPUT;
    END;
    
    --Q9 P2
    FUNCTION LAST_DEPOSIT (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        ACCT_NUM        CHAR(10);
        R_TRANSID       DEPOSIT_ACCT_TRANSACTION.TRANSID%TYPE;
        R_ACCTNO        DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
        R_AMOUNT        DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;
        R_DESCRIPTION   DEPOSIT_ACCT_TRANSACTION.DESCRIPTION%TYPE;
        R_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
        
    BEGIN
        SELECT ACCTNO
        INTO ACCT_NUM
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'INTCK';
    
        SELECT TRANSID,ACCTNO,AMOUNT,DESCRIPTION, TRANSDATETIME
        INTO R_TRANSID,R_ACCTNO,R_AMOUNT,R_DESCRIPTION,R_TRANSDATETIME
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM 
        AND UPPER(TRANSTYPE) = 'CREDIT'
        AND TRANSDATETIME = (SELECT MAX(TRANSDATETIME) 
                            FROM DEPOSIT_ACCT_TRANSACTION
                            WHERE ACCTNO=ACCT_NUM
                            AND UPPER(TRANSTYPE) = 'CREDIT');
        DBMS_OUTPUT.PUT_LINE('TRANSID: '||R_TRANSID||' ACCTNO: '||R_ACCTNO||' AMOUNT: '||R_AMOUNT||' DESCRIPTION: '||R_DESCRIPTION||' TIME: '||R_TRANSDATETIME);
        RETURN R_AMOUNT;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_DEPOSIT', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID and try again.');
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_DEPOSIT', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned');
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_DEPOSIT', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('BANKP.LAST_DEPOSIT', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('BANKP.LAST_DEPOSIT', NULL, SYSDATE, NULL, NULL);  
    END;
    
    --Q9 P3
    FUNCTION LAST_SAVINGS_DEPOSIT (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        ACCT_NUM        CHAR(10);
        R_TRANSID       DEPOSIT_ACCT_TRANSACTION.TRANSID%TYPE;
        R_ACCTNO        DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
        R_AMOUNT        DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;
        R_DESCRIPTION   DEPOSIT_ACCT_TRANSACTION.DESCRIPTION%TYPE;
        R_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
        
    BEGIN
        SELECT ACCTNO
        INTO ACCT_NUM
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'SAVINGS';
    
        SELECT TRANSID,ACCTNO,AMOUNT,DESCRIPTION, TRANSDATETIME
        INTO R_TRANSID,R_ACCTNO,R_AMOUNT,R_DESCRIPTION,R_TRANSDATETIME
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM 
        AND UPPER(TRANSTYPE) = 'CREDIT'
        AND TRANSDATETIME = (SELECT MAX(TRANSDATETIME) 
                            FROM DEPOSIT_ACCT_TRANSACTION
                            WHERE ACCTNO=ACCT_NUM
                            AND UPPER(TRANSTYPE) = 'CREDIT');
        DBMS_OUTPUT.PUT_LINE('TRANSID: '||R_TRANSID||' ACCTNO: '||R_ACCTNO||' AMOUNT: '||R_AMOUNT||' DESCRIPTION: '||R_DESCRIPTION||' TIME: '||R_TRANSDATETIME);
        RETURN R_AMOUNT;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_SAVINGS_DEPOSIT', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID and try again.');
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_SAVINGS_DEPOSIT', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned');
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_SAVINGS_DEPOSIT', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('BANKP.LAST_SAVINGS_DEPOSIT', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('BANKP.LAST_SAVINGS_DEPOSIT', NULL, SYSDATE, NULL, NULL);  
    END;

--Q9 P4
    FUNCTION LAST_WITHDRAWAL (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        ACCT_NUM        CHAR(10);
        R_TRANSID       DEPOSIT_ACCT_TRANSACTION.TRANSID%TYPE;
        R_ACCTNO        DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
        R_AMOUNT        DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;
        R_DESCRIPTION   DEPOSIT_ACCT_TRANSACTION.DESCRIPTION%TYPE;
        R_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
        
    BEGIN
        SELECT ACCTNO
        INTO ACCT_NUM
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'INTCK';
    
        SELECT TRANSID,ACCTNO,AMOUNT,DESCRIPTION,TRANSDATETIME
        INTO R_TRANSID,R_ACCTNO,R_AMOUNT,R_DESCRIPTION,R_TRANSDATETIME
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM 
        AND REGEXP_LIKE(DESCRIPTION,'WITHDRAWAL','i')
        AND TRANSDATETIME = (SELECT MAX(TRANSDATETIME) 
                            FROM DEPOSIT_ACCT_TRANSACTION
                            WHERE ACCTNO=ACCT_NUM
                            AND REGEXP_LIKE(DESCRIPTION,'WITHDRAWAL','i'));
        DBMS_OUTPUT.PUT_LINE('TRANSID: '||R_TRANSID||' ACCTNO: '||R_ACCTNO||' AMOUNT: '||R_AMOUNT||' DESCRIPTION: '||R_DESCRIPTION||' TIME: '||R_TRANSDATETIME);
        RETURN R_AMOUNT;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID numbers and try again.');
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);  
    END;
    
    --Q9 P5
    FUNCTION LAST_SAVINGS_WITHDRAWAL (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        ACCT_NUM        CHAR(10);
        R_TRANSID       DEPOSIT_ACCT_TRANSACTION.TRANSID%TYPE;
        R_ACCTNO        DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
        R_AMOUNT        DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;
        R_DESCRIPTION   DEPOSIT_ACCT_TRANSACTION.DESCRIPTION%TYPE;
        R_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
        
    BEGIN
        SELECT ACCTNO
        INTO ACCT_NUM
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'SAVINGS';
    
        SELECT TRANSID,ACCTNO,AMOUNT,DESCRIPTION,TRANSDATETIME
        INTO R_TRANSID,R_ACCTNO,R_AMOUNT,R_DESCRIPTION,R_TRANSDATETIME
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM 
        AND REGEXP_LIKE(DESCRIPTION,'WITHDRAWAL','i')
        AND TRANSDATETIME = (SELECT MAX(TRANSDATETIME) 
                            FROM DEPOSIT_ACCT_TRANSACTION
                            WHERE ACCTNO=ACCT_NUM
                            AND REGEXP_LIKE(DESCRIPTION,'WITHDRAWAL','i'));
        DBMS_OUTPUT.PUT_LINE('TRANSID: '||R_TRANSID||' ACCTNO: '||R_ACCTNO||' AMOUNT: '||R_AMOUNT||' DESCRIPTION: '||R_DESCRIPTION||' TIME: '||R_TRANSDATETIME);
        RETURN R_AMOUNT;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID numbers and try again.');
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('BANKP.LAST_WITHDRAWAL', NULL, SYSDATE, NULL, NULL);  
    END;
END BANKP;
/

SELECT BANKP.CURRENT_BAL(9900000001) FROM DUAL;
SELECT BANKP.LAST_DEPOSIT(9900000001) FROM DUAL;
SELECT BANKP.LAST_SAVINGS_DEPOSIT(9900000002) FROM DUAL;
SELECT BANKP.LAST_WITHDRAWAL(9900000001) FROM DUAL;
SELECT BANKP.LAST_SAVINGS_WITHDRAWAL(9900000002) FROM DUAL;

--Q9 b.
CREATE OR REPLACE PACKAGE BRANCHP AS
    FUNCTION BRANCH_ADDRESS(BRANCH_ID NUMBER) RETURN VARCHAR2;
    FUNCTION BRANCH_PHONE(BRANCH_ID NUMBER) RETURN NUMBER;
    PROCEDURE BRANCH_EMPS(BRANCH_ID NUMBER);
END BRANCHP;
/

CREATE OR REPLACE PACKAGE BODY BRANCHP AS
--Q9 B1
    FUNCTION BRANCH_ADDRESS(BRANCH_ID NUMBER) RETURN VARCHAR2 AS
        BRANCH_ADDR VARCHAR2(100);
    BEGIN
        SELECT ADDRESS
        INTO BRANCH_ADDR
        FROM BRANCH_INFO
        WHERE BRANCHID = BRANCH_ID;
        RETURN BRANCH_ADDR;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_ADDRESS', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID number and try again.');
            INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_ADDRESS', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_ADDRESS', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_ADDRESS', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_ADDRESS', NULL, SYSDATE, NULL, NULL);  
    END;
    
    --Q9 B2
    FUNCTION BRANCH_PHONE(BRANCH_ID NUMBER) RETURN NUMBER AS
        PHONE NUMBER;
    BEGIN
        SELECT BRANCHPHONE 
        INTO PHONE
        FROM BRANCH_INFO
        WHERE BRANCHID = BRANCH_ID;
        RETURN PHONE;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_PHONE', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID number and try again.');
            INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_PHONE', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_PHONE', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_PHONE', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_PHONE', NULL, SYSDATE, NULL, NULL);  
    END;
    
    --Q9 B3
    PROCEDURE BRANCH_EMPS(BRANCH_ID NUMBER) AS
        NAMES VARCHAR2(70);
        
        CURSOR C_BRANCH_EMPS IS 
            SELECT B.EMP_EMPLOYEE_NAME NAME
            FROM BRANCH_EMPLOYEE A INNER JOIN EMPLOYEE_INFO B
            ON A.EMPID = B.EMPID
            WHERE BRANCHID = BRANCH_ID;
    BEGIN
        OPEN C_BRANCH_EMPS;
        LOOP
            FETCH C_BRANCH_EMPS INTO NAMES;
            EXIT WHEN C_BRANCH_EMPS%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(NAMES);
        END LOOP;
        CLOSE C_BRANCH_EMPS;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_EMPS', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID number and try again.');
            INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_EMPS', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_EMPS', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_EMPS', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('BRANCHP.BRANCH_EMPS', NULL, SYSDATE, NULL, NULL);  
    END;
END BRANCHP;
/

SELECT BRANCHP.BRANCH_ADDRESS(1001) FROM DUAL;
SELECT BRANCHP.BRANCH_PHONE(1000) FROM DUAL;
EXEC BRANCHP.BRANCH_EMPS(1000);












--Q9 C.
--THE ID SEQUENCE GENERATOR WE USED IN THE FIRST SECTION CONTAINS FOUR DIGIT IDS UNLIKE THOSE 
--USED IN THE CUSTOMER TABLE. BECAUSE OF THIS, I AM CREATING A NEW SEQUENCE ID GENERATOR FOR THIS TASK. 
CREATE SEQUENCE CUSTOMER_ID_GEN
START WITH 9900000005
INCREMENT BY 1;

DESC CUSTOMER;

CREATE SEQUENCE EMPID_GENERATOR
START WITH 1000000010
INCREMENT BY 1;

DESC BANK_EMPLOYEE;

DESC CD_ACCOUNT;
CREATE SEQUENCE CD_NUM_GENERATOR
START WITH 0000004
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE INSERT_PKG AS
        PROCEDURE ADD_CUSTOMER(ADD_SSN                  CHAR,
                                ADD_FNAME              VARCHAR2,
                                ADD_MNAME              VARCHAR2,
                                ADD_LNAME              VARCHAR2,
                                ADD_DOB                DATE,         
                                ADD_STREET             VARCHAR2, 
                                ADD_CITY               VARCHAR2, 
                                ADD_STATE              VARCHAR2,  
                                ADD_ZIP                VARCHAR2, 
                                ADD_HOMEPHONE          CHAR,    
                                ADD_WORKPHONE          CHAR,     
                                ADD_ATMNO              CHAR,     
                                ADD_ATMPW              VARCHAR2, 
                                ADD_WEBID              VARCHAR2, 
                                ADD_WEBPW              VARCHAR2, 
                                ADD_EMAIL              VARCHAR2);
        PROCEDURE ADD_BANK_EMP(
                            ADD_SSN          CHAR,
                            ADD_FNAME        VARCHAR2,
                            ADD_MNAME        VARCHAR2,
                            ADD_LNAME        VARCHAR2,
                            ADD_STREET       VARCHAR2,
                            ADD_CITY         VARCHAR2,
                            ADD_STATE        VARCHAR2,
                            ADD_ZIP          VARCHAR2,
                            ADD_HOMEPHONE    CHAR,
                            ADD_EMAIL        VARCHAR2,
                            ADD_GENDER       CHAR,
                            ADD_RACE         CHAR,       
                            ADD_DOB          DATE,          
                            ADD_SPOUSEFNAME  VARCHAR2,  
                            ADD_SPOUSELNAME  VARCHAR2,  
                            ADD_DEGREE       VARCHAR2,   
                            ADD_DEGREEDATE   DATE,          
                            ADD_HIREDATE     DATE,          
                            ADD_JOBTITLE     VARCHAR2,  
                            ADD_STAFFMANAGER NUMBER);
        PROCEDURE ADD_CD_ACCOUNT(ADD_CDPRODID CHAR,
                                ADD_PRIMARY NUMBER,
                                ADD_COOWNER NUMBER,
                                ADD_CDAMT NUMBER);
        PROCEDURE ADD_DRIVER(ADD_EMPID     NUMBER, 
                            ADD_LICENSENO    VARCHAR2, 
                            ADD_STATEOFISSUE CHAR, 
                            ADD_EXPDATE      DATE) ;
        PROCEDURE DELETE_DRIVER(EMPS_ID NUMBER);
        PROCEDURE UPDATE_DRIVER(CHANGE_EMPID     NUMBER, 
                                CHANGE_LICENSENO    VARCHAR2, 
                                CHANGE_STATEOFISSUE CHAR, 
                                CHANGE_EXPDATE      DATE);
END INSERT_PKG;
/

--PKG BODY
CREATE OR REPLACE PACKAGE BODY INSERT_PKG AS
    
    PROCEDURE ADD_CUSTOMER(ADD_SSN       CHAR,
                                    ADD_FNAME              VARCHAR2,
                                    ADD_MNAME              VARCHAR2,
                                    ADD_LNAME              VARCHAR2,
                                    ADD_DOB                DATE,         
                                    ADD_STREET             VARCHAR2, 
                                    ADD_CITY               VARCHAR2, 
                                    ADD_STATE              VARCHAR2,  
                                    ADD_ZIP                VARCHAR2, 
                                    ADD_HOMEPHONE          CHAR,    
                                    ADD_WORKPHONE          CHAR,     
                                    ADD_ATMNO              CHAR,     
                                    ADD_ATMPW              VARCHAR2, 
                                    ADD_WEBID              VARCHAR2, 
                                    ADD_WEBPW              VARCHAR2, 
                                    ADD_EMAIL              VARCHAR2) AS
    BEGIN
        INSERT INTO CUSTOMER(CUSTID,SSN,FNAME,MNAME,LNAME,DOB,STREET,CITY,STATE,ZIP,HOMEPHONE,WORKPHONE,ATMNO,ATMPW,WEBID,WEBPW,EMAIL)
        VALUES(CUSTOMER_ID_GEN.NEXTVAL,ADD_SSN,ADD_FNAME,ADD_MNAME,ADD_LNAME,ADD_DOB,ADD_STREET,ADD_CITY,ADD_STATE,ADD_ZIP,ADD_HOMEPHONE,ADD_WORKPHONE,ADD_ATMNO,ADD_ATMPW,ADD_WEBID,ADD_WEBPW,ADD_EMAIL);
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_CUSTOMER', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_CUSTOMER', NULL, SYSDATE, NULL, NULL);  
    END;
    
    --ADD BANK EMPLOYEE PROCEDURE
    PROCEDURE ADD_BANK_EMP(
                            ADD_SSN          CHAR,
                            ADD_FNAME        VARCHAR2,
                            ADD_MNAME        VARCHAR2,
                            ADD_LNAME        VARCHAR2,
                            ADD_STREET       VARCHAR2,
                            ADD_CITY         VARCHAR2,
                            ADD_STATE        VARCHAR2,
                            ADD_ZIP          VARCHAR2,
                            ADD_HOMEPHONE    CHAR,
                            ADD_EMAIL        VARCHAR2,
                            ADD_GENDER       CHAR,
                            ADD_RACE         CHAR,       
                            ADD_DOB          DATE,          
                            ADD_SPOUSEFNAME  VARCHAR2,  
                            ADD_SPOUSELNAME  VARCHAR2,  
                            ADD_DEGREE       VARCHAR2,   
                            ADD_DEGREEDATE   DATE,          
                            ADD_HIREDATE     DATE,          
                            ADD_JOBTITLE     VARCHAR2,  
                            ADD_STAFFMANAGER NUMBER) AS
    BEGIN
        INSERT INTO BANK_EMPLOYEE(EMPID,SSN,FNAME,MNAME,LNAME,STREET,CITY,STATE,ZIP,HOMEPHONE,EMAIL,GENDER,RACE,DOB,SPOUSEFNAME,SPOUSELNAME,DEGREE,DEGREEDATE,HIREDATE,JOBTITLE,STAFFMANAGER)
            VALUES(EMPID_GENERATOR.NEXTVAL,ADD_SSN,ADD_FNAME,ADD_MNAME,ADD_LNAME,ADD_STREET,ADD_CITY,ADD_STATE,ADD_ZIP,ADD_HOMEPHONE,ADD_EMAIL,ADD_GENDER,ADD_RACE,ADD_DOB,ADD_SPOUSEFNAME,ADD_SPOUSELNAME,ADD_DEGREE,ADD_DEGREEDATE,ADD_HIREDATE,ADD_JOBTITLE,ADD_STAFFMANAGER);
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_BANK_EMP', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_BANK_EMP', NULL, SYSDATE, NULL, NULL);  
    END;
    
    -- ADD PROCEDURE TO INSERT ROW INTO CD
    PROCEDURE ADD_CD_ACCOUNT(ADD_CDPRODID CHAR,
                                                ADD_PRIMARY NUMBER,
                                                ADD_COOWNER NUMBER,
                                                ADD_CDAMT NUMBER) AS
    BEGIN
        INSERT INTO CD_ACCOUNT(CDNO, CDPRODID, DATEOPENED, PRIMARY, COOWNER, CDAMT)
        VALUES('CCD'||LTRIM(TO_CHAR(CD_NUM_GENERATOR.NEXTVAL,'0000000')), ADD_CDPRODID, SYSDATE, ADD_PRIMARY, ADD_COOWNER, ADD_CDAMT);
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_CD_ACCOUNT', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_CD_ACCOUNT', NULL, SYSDATE, NULL, NULL);  
    END;

    -- PROCEDURE TO ADD TO DRIVER TABLE
    PROCEDURE ADD_DRIVER(ADD_EMPID     NUMBER, 
                                            ADD_LICENSENO    VARCHAR2, 
                                            ADD_STATEOFISSUE CHAR, 
                                            ADD_EXPDATE      DATE) AS
    BEGIN
        INSERT INTO DRIVER(EMPID, LICENSENO, STATEOFISSUE, EXPDATE)
        VALUES(ADD_EMPID, ADD_LICENSENO, ADD_STATEOFISSUE, ADD_EXPDATE);
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_DRIVER', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_DRIVER', NULL, SYSDATE, NULL, NULL);  
    END;    
    
    -- PROCEDURE TO DELETE A DRIVER
    PROCEDURE DELETE_DRIVER(EMPS_ID NUMBER) AS
    BEGIN
        DELETE FROM DRIVER
            WHERE EMPID = EMPS_ID;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.DELETE_DRIVER', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID number and try again.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.DELETE_DRIVER', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.DELETE_DRIVER', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.DELETE_DRIVER', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.DELETE_DRIVER', NULL, SYSDATE, NULL, NULL);  
    END;
    
    
    --PROCEDURE TO UPDATE A DRIVER
    PROCEDURE UPDATE_DRIVER(CHANGE_EMPID     NUMBER, 
                                            CHANGE_LICENSENO    VARCHAR2, 
                                            CHANGE_STATEOFISSUE CHAR, 
                                            CHANGE_EXPDATE      DATE) AS
    BEGIN
        UPDATE DRIVER
        SET 
            LICENSENO = CHANGE_LICENSENO,
            STATEOFISSUE = CHANGE_STATEOFISSUE,
            EXPDATE = CHANGE_EXPDATE
        WHERE EMPID=CHANGE_EMPID;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.UPDATE_DRIVER', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID number and try again.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.UPDATE_DRIVER', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.UPDATE_DRIVER', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.UPDATE_DRIVER', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.UPDATE_DRIVER', NULL, SYSDATE, NULL, NULL);  
    END;
    
END INSERT_PKG;
/
EXEC INSERT_PKG.ADD_CUSTOMER('999919876','JERRY', NULL, 'HOTDOG', '09-DEC-85','54 MUSTARD CT.', 'KETCHUP', 'CA', '99885', '9164453211', NULL, NULL, NULL, NULL, NULL, NULL);
SELECT * FROM CUSTOMER;

EXEC INSERT_PKG.ADD_BANK_EMP('999919876','JERRY', NULL, 'HOTDOG', '54 MUSTARD CT.', 'KETCHUP', 'CA', '99885', '9164453211', NULL, 'M', NULL, '03-DEC-85', NULL, NULL,NULL,NULL,SYSDATE,'TELLER',NULL);
select * from Bank_employee;

EXEC INSERT_PKG.ADD_CD_ACCOUNT('CD1',9900000009,NULL, 500);
SELECT * FROM CD_ACCOUNT WHERE PRIMARY = 9900000009;

EXEC INSERT_PKG.ADD_DRIVER(1000000001,'D6792289', 'CA', '12-DEC-2021');
SELECT * FROM DRIVER WHERE STATEOFISSUE = 'CA';

EXEC INSERT_PKG.DELETE_DRIVER(1000000001);

EXEC INSERT_PKG.UPDATE_DRIVER(1000000002,'PA4iu3335552','PA','01-JAN-24');
SELECT * FROM DRIVER;

SELECT * FROM CUSTOMER;
SELECT * FROM BANK_EMPLOYEE;

------
------
-----
----
------




--CREATE YOUR OWN PACKAGE
CREATE OR REPLACE PACKAGE UPDATE_EMPLOYEE AS
    PROCEDURE UPDATE_SALARY(EMPS_ID NUMBER, NEW_SAL NUMBER);
    PROCEDURE ADD_EVALUATION(EMPS_ID    NUMBER,
                            NEW_YEAR    NUMBER,
                            NEW_SALARY  NUMBER, 
                            NEW_EVAL    NUMBER, 
                            TAX_DED     NUMBER);
    PROCEDURE EMP_TRANSFER(EMPS_ID NUMBER, NEW_BRANCHID NUMBER);   
    PROCEDURE CHANGE_MANAGER(BRANCH_ID          NUMBER, 
                            NEW_MANAGERID       NUMBER,
                            ASSIGN_DATE         DATE, 
                            NEW_MANAGER_NAME VARCHAR2);                           
    PROCEDURE UPDATE_EMP_CONTACT_INFO(EMPS_ID           NUMBER,
                                      ENTER_HOMEPHONE   CHAR, 
                                      ENTER_EMAIL       VARCHAR2);
END UPDATE_EMPLOYEE;
/

CREATE OR REPLACE PACKAGE BODY UPDATE_EMPLOYEE AS

    PROCEDURE UPDATE_SALARY(EMPS_ID NUMBER, NEW_SAL NUMBER) AS
    BEGIN
        UPDATE EMP_ANNUAL_DATA
        SET SALARY = NEW_SAL
        WHERE EMPID = EMPS_ID
        AND YEAR = (SELECT MAX(YEAR) FROM EMP_ANNUAL_DATA
            WHERE EMPID=EMPS_ID);
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('UPDATE_EMPLOYEE.UPDATE_SALARY', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID number and try again.');
            INSERT INTO ERR_LOG VALUES('UPDATE_EMPLOYEE.UPDATE_SALARY', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('UPDATE_EMPLOYEE.UPDATE_SALARY', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('UPDATE_EMPLOYEE.UPDATE_SALARY', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('UPDATE_EMPLOYEE.UPDATE_SALARY', NULL, SYSDATE, NULL, NULL);  
    END;
    
    PROCEDURE ADD_EVALUATION(EMPS_ID NUMBER,
                            NEW_YEAR NUMBER,
                            NEW_SALARY NUMBER, 
                            NEW_EVAL NUMBER, 
                            TAX_DED NUMBER) AS
    BEGIN
        INSERT INTO EMP_ANNUAL_DATA(EMPID, YEAR, SALARY, EVALUATION, TAXDEDUCTION)
        VALUES(EMPS_ID, NEW_YEAR, NEW_SALARY, NEW_EVAL, TAX_DED);
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_EVALUATION', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your ID number and try again.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_EVALUATION', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_EVALUATION', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_EVALUATION', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.ADD_EVALUATION', NULL, SYSDATE, NULL, NULL);  
    END;
    
    
    PROCEDURE EMP_TRANSFER(EMPS_ID NUMBER, NEW_BRANCHID NUMBER) AS
    BEGIN
        UPDATE BRANCH_EMPLOYEE
        SET BRANCHID = NEW_BRANCHID
        WHERE EMPID = EMPS_ID;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.EMP_TRANSFER', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your values and try again.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.EMP_TRANSFER', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.EMP_TRANSFER', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.EMP_TRANSFER', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.EMP_TRANSFER', NULL, SYSDATE, NULL, NULL);  
    END;
    
    
    PROCEDURE CHANGE_MANAGER(BRANCH_ID NUMBER, 
                            NEW_MANAGERID NUMBER,
                            ASSIGN_DATE   DATE, 
                            NEW_MANAGER_NAME VARCHAR2) AS
    BEGIN
        DELETE FROM BRANCH_MANAGER
            WHERE BRANCHID = BRANCH_ID;
        
        INSERT INTO BRANCH_MANAGER VALUES(BRANCH_ID, NEW_MANAGERID, ASSIGN_DATE, NEW_MANAGER_NAME);
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.CHANGE_MANAGER', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your VALUES and try again.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.CHANGE_MANAGER', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.CHANGE_MANAGER', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.CHANGE_MANAGER', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.CHANGE_MANAGER', NULL, SYSDATE, NULL, NULL);  
    END;
    
    
    PROCEDURE UPDATE_EMP_CONTACT_INFO(EMPS_ID           NUMBER,
                                      ENTER_HOMEPHONE    CHAR, 
                                      ENTER_EMAIL         VARCHAR2) AS
    BEGIN
        UPDATE BANK_EMPLOYEE
        SET HOMEPHONE = ENTER_HOMEPHONE,
            EMAIL     = ENTER_EMAIL
        WHERE EMPID = EMPS_ID;
    EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.PDATE_EMP_CONTACT_INFO', NULL, SYSDATE, NULL, NULL);
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Check your VALUES and try again.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.PDATE_EMP_CONTACT_INFO', NULL, SYSDATE, NULL, NULL);
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Too many rows returned.');
            INSERT INTO ERR_LOG VALUES('INSERT_PKG.PDATE_EMP_CONTACT_INFO', NULL, SYSDATE, NULL, NULL);
        WHEN OTHERS THEN
            IF SQL%NOTFOUND THEN
               DBMS_OUTPUT.PUT_LINE('No such record was found');
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.PDATE_EMP_CONTACT_INFO', NULL, SYSDATE, NULL, NULL);
            END IF;
               DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
               INSERT INTO ERR_LOG VALUES('INSERT_PKG.PDATE_EMP_CONTACT_INFO', NULL, SYSDATE, NULL, NULL);  
    END;
    
END UPDATE_EMPLOYEE;
/
EXEC UPDATE_EMPLOYEE.UPDATE_SALARY(1000000003, 63000);
SELECT * FROM EMP_ANNUAL_DATA WHERE EMPID = 1000000003;

EXEC UPDATE_EMPLOYEE.ADD_EVALUATION(1000000003, 2020, 65000, 8, 1);
SELECT * FROM EMP_ANNUAL_DATA WHERE EMPID = 1000000003;


EXEC UPDATE_EMPLOYEE.EMP_TRANSFER(1000000003, 1000);
SELECT * FROM BRANCH_EMPLOYEE WHERE EMPID = 1000000003;

EXEC UPDATE_EMPLOYEE.CHANGE_MANAGER(1001,1000000012,SYSDATE, 'JERRY HOTDOG');
SELECT * FROM BRANCH_MANAGER;

EXEC UPDATE_EMPLOYEE.UPDATE_EMP_CONTACT_INFO(1000000012,9998153232, 'JERRY@NO_BURGER.COM');
SELECT * FROM BANK_EMPLOYEE WHERE EMPID = 1000000012;
DESC BANK_EMPLOYEE;



--CH11 CREATE TRIGGER FOR DELETION FROM EMPLOYEE FILE
CREATE TABLE EMPLOYEE_HISTORY AS
    (SELECT * FROM BANK_EMPLOYEE WHERE 1=2);
    
CREATE OR REPLACE TRIGGER ON_EMP_DELETION
    BEFORE DELETE ON BANK_EMPLOYEE
    FOR EACH ROW
    BEGIN
        INSERT INTO EMPLOYEE_HISTORY
            VALUES(:OLD.EMPID,:OLD.SSN,:OLD.FNAME,:OLD.MNAME,:OLD.LNAME,
                    :OLD.STREET,:OLD.CITY,:OLD.STATE,:OLD.ZIP,:OLD.HOMEPHONE,
                    :OLD.EMAIL,:OLD.GENDER,:OLD.RACE,:OLD.DOB,:OLD.SPOUSEFNAME,
                    :OLD.SPOUSELNAME,:OLD.DEGREE,:OLD.DEGREEDATE,:OLD.HIREDATE,
                    :OLD.JOBTITLE,:OLD.STAFFMANAGER);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('AN ERROR OCCURRED');
            INSERT INTO ERR_LOG VALUES('BANK_EMPLOYEE','ON_EMP_DELETION', SYSDATE,'BEFORE EACH ROW', 'DELETE');

    END;
 /   
 
Select Trigger_Name,  Trigger_Body, TRIGGER_TYPE  from USER_TRIGGERS;
INSERT INTO BANK_EMPLOYEE VALUES(1000000077,111229999,'TESTY',NULL,'CELESTINE', '122 JUICE CT', 'STEVENS', 'CA', 11122, 9165553344,'JUICYGOOSE@GOOGLE.COM', 'F', NULL, '10-JAN-85', NULL, NULL, 'MAST', NULL, '03-DEC-18', 'TELLER', NULL);
DELETE FROM BANK_EMPLOYEE
WHERE EMPID = 1000000077;
SELECT * FROM EMPLOYEE_HISTORY;
 
 
 
 
 
 
-- CREATE CUSTOMER TRIGGER
CREATE TABLE CUST_MOD_LOG
    (CUSTOMER       VARCHAR2(100),
     CHANGE_DATE    DATE, 
     CHANGE_TYPE    CHAR(1));
     
CREATE OR REPLACE TRIGGER CUSTOMER_UPDATE
    AFTER INSERT OR DELETE OR UPDATE ON CUSTOMER
    FOR EACH ROW
DECLARE
    V_CHANGE CHAR(1);
    V_CUSTID CUSTOMER.CUSTID%TYPE;
BEGIN
	IF INSERTING THEN
		V_CHANGE := 'I';
        V_CUSTID := :NEW.CUSTID;
	ELSIF DELETING THEN
		V_CHANGE := 'D';
        V_CUSTID := :OLD.CUSTID;
	ELSE
		V_CHANGE := 'U';
        V_CUSTID := :NEW.CUSTID;
	END  IF;
    INSERT INTO CUST_MOD_LOG VALUES(V_CUSTID, SYSDATE, V_CHANGE);
    DBMS_OUTPUT.PUT_LINE('CHANGES SAVED TO CUST_MOD_LOG');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('AN ERROR OCCURRED');
        INSERT INTO ERR_LOG VALUES('CUSTOMER','CUSTOMER_UPDATE', SYSDATE,'AFTER EACH ROW', 'INSERT,DELETE,UPDATE');

END;
/
UPDATE CUSTOMER 
SET MNAME = 'STEVENS'
WHERE CUSTID = 9900000001;

SELECT * FROM CUST_MOD_LOG;
/
--CREATE LARGE_DEP_LOG TO TRACK DEPOSITS OVER 5000
CREATE TABLE LARGE_DEP_LOG(
     ACCTNO         VARCHAR2(10),
     AMOUNT         NUMBER,
     TRAN_DESC      VARCHAR2(100),
     DEP_DATE       TIMESTAMP,
     DEP_LOCATION   VARCHAR2(10));

CREATE OR REPLACE TRIGGER DEPOSIT_OVER_5000
    AFTER INSERT ON DEPOSIT_ACCT_TRANSACTION
    FOR EACH ROW
BEGIN
    IF REGEXP_LIKE(:NEW.DESCRIPTION,'DEPOSIT','i') AND :NEW.AMOUNT>5000 THEN
        INSERT INTO LARGE_DEP_LOG VALUES(:NEW.ACCTNO,:NEW.AMOUNT,:NEW.DESCRIPTION,:NEW.TRANSDATETIME,:NEW.ACCESSPTID);
        DBMS_OUTPUT.PUT_LINE('CHANGES SAVED TO LARGE_DEP_LOG');
    END IF;
EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('DEPOSIT_ACCT_TRANSACTION', 'DEPOSIT_OVER_5000', SYSDATE, 'AFTER EACH ROW', 'INSERT');
        WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('DEPOSIT_ACCT_TRANSACTION', 'DEPOSIT_OVER_5000', SYSDATE, 'AFTER EACH ROW', 'INSERT');
    END;
/

INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1,'CDEP000001','Credit',CURRENT_TIMESTAMP, 5001, 'TELLER DEPOSIT', 'T000001');
SELECT * FROM LARGE_DEP_LOG;

--CREATE LARGE_DEP_LOG TO TRACK DEPOSITS OVER 10000
CREATE TABLE LARGE_WITH_LOG(
     ACCTNO         VARCHAR2(10),
     AMOUNT         NUMBER,
     TRAN_DESC      VARCHAR2(100),
     DEP_DATE       TIMESTAMP,
     DEP_LOCATION   VARCHAR2(10));

CREATE OR REPLACE TRIGGER DEPOSIT_OVER_10000
    AFTER INSERT ON DEPOSIT_ACCT_TRANSACTION
    FOR EACH ROW
BEGIN
    IF REGEXP_LIKE(:NEW.DESCRIPTION,'DEPOSIT','i') AND :NEW.AMOUNT>10000 THEN
        INSERT INTO LARGE_WITH_LOG VALUES(:NEW.ACCTNO,:NEW.AMOUNT,:NEW.DESCRIPTION,:NEW.TRANSDATETIME,:NEW.ACCESSPTID);
        DBMS_OUTPUT.PUT_LINE('CHANGES SAVED TO LARGE_WITH_LOG');
    END IF;
EXCEPTION
        WHEN VALUE_ERROR THEN					
            DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE||SUBSTR(SQLERRM,1,80));  
            INSERT INTO ERR_LOG VALUES('DEPOSIT_ACCT_TRANSACTION', 'DEPOSIT_OVER_10000', SYSDATE, 'AFTER EACH ROW', 'INSERT');
        WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('Error '||SQLCODE || SUBSTR(SQLERRM,1,80)); 
           INSERT INTO ERR_LOG VALUES('DEPOSIT_ACCT_TRANSACTION', 'DEPOSIT_OVER_10000', SYSDATE, 'AFTER EACH ROW', 'INSERT');
    END;
/

CREATE TABLE ERR_LOG(
    TAB_NAME        VARCHAR2(50),
    TRIG_NAME       VARCHAR2(50),
    THE_DATE        DATE, 
    TRIG_EVENT      VARCHAR2(50),
    TRIG_TYPE       VARCHAR2(50));
    
select * from err_log;

INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1,'CDEP000001','Credit',CURRENT_TIMESTAMP, 10001, 'TELLER DEPOSIT', 'T000001');
SELECT * FROM LARGE_with_LOG;

SELECT * FROM DRIVER;
SELECT * FROM CD_ACCOUNT;
SELECT * FROM DEPOSIT_ACCT_TRANSACTION;
SELECT * FROM TRANSACTION_LOG;
SELECT * FROM DEPOSIT_ACCT;

SELECT * FROM BRANCH_MANAGER;
SELECT * FROM BRANCH;
SELECT * FROM BRANCH_DRIVERS;
SELECT * FROM BRANCH_PRODUCTIVITY_COST;
SELECT * FROM BRANCH_STATS;
SELECT * FROM BRANCH_DEPOSIT_TRANSACTIONS;
SELECT * FROM BRANCH_ACCESS_POINTS;
SELECT * FROM BRANCH_EMPLOYEE;
SELECT * FROM BRANCH_TRANSACTION_TOTAL;
SELECT * FROM BRANCH_INFO;
SELECT * FROM BRANCH_SALARY_INFO;
SELECT * FROM NUM_OF_BRANCH_EMPS;

SELECT * FROM EMPLOYEE_INFO;
SELECT * FROM INTERMEDIATE_VIEW;
SELECT * FROM INTERMEDIATE_TWO;
SELECT * FROM DEPARTMENT;
SELECT * FROM DEPOSIT_ACCT_PRODUCT;
SELECT * FROM JOB;
SELECT * FROM BANK_EMPLOYEE;
SELECT * FROM EMP_ANNUAL_DATA;
SELECT * FROM EMPLOYEE_SALARY;
SELECT * FROM ACCESS_POINT_TRANSACTION_TOTAL;
SELECT * FROM LOAN_PAYMENT;
SELECT * FROM LOAN;
SELECT * FROM CREDIT_ACCT_TRANSACTION;
SELECT * FROM CREDIT_ACCOUNT;
SELECT * FROM CUSTOMER;

--cr86trTqAU3DViG