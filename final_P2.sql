set serveroutput on;
set autocommit on;

CREATE TABLE TODAY_DEPOSIT(
    TRANSDATETIME TIMESTAMP, 
    ACCTNO        VARCHAR2(11),
    ACCT_TYPE     VARCHAR2(10),
    AMOUNT        NUMBER);

INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'CREDIT', SYSDATE, 260, 'atm deposit','A000002');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'CREDIT', SYSDATE, 400, 'atm deposit','A000002');

--PART 1B QUESTION 1. 
CREATE OR REPLACE PROCEDURE ADD_TODAYS_DEPOSIT IS
    C_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
    C_ACCTNO DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
    C_ACCT_TYPE VARCHAR2(10):= 'CREDIT';
    C_AMOUNT DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;

    CURSOR C_DEPOSIT_ACCT_TRANSACTION IS
        SELECT TRANSDATETIME, ACCTNO, AMOUNT
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE UPPER(TRANSTYPE)='CREDIT'
        AND TO_CHAR(TRANSDATETIME,'MMDDYYYY') = TO_CHAR(SYSDATE,'MMDDYYYY');

BEGIN
    OPEN C_DEPOSIT_ACCT_TRANSACTION;
    LOOP
        FETCH C_DEPOSIT_ACCT_TRANSACTION INTO C_TRANSDATETIME, C_ACCTNO, C_AMOUNT;
        EXIT WHEN C_DEPOSIT_ACCT_TRANSACTION%NOTFOUND;
        INSERT INTO TODAY_DEPOSIT VALUES(C_TRANSDATETIME, C_ACCTNO,C_ACCT_TYPE, C_AMOUNT);
    END LOOP;
    CLOSE C_DEPOSIT_ACCT_TRANSACTION;
END;
/

EXEC ADD_TODAYS_DEPOSIT;
--DELETE FROM TODAY_DEPOSIT;
SELECT * FROM TODAY_DEPOSIT;

--PART 1B QUESTION 2
CREATE TABLE TODAY_WITHDRAW(
    TRANSDATETIME TIMESTAMP, 
    ACCTNO        VARCHAR2(11),
    ACCT_TYPE     VARCHAR2(10),
    AMOUNT        NUMBER);

INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'DEBIT', SYSDATE, 120, 'atm withdrawal','A000002');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'DEBIT', SYSDATE, 40, 'atm withdrawal','A000002');


CREATE OR REPLACE PROCEDURE ADD_TODAYS_WITHDRAW IS
    C_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
    C_ACCTNO DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
    C_ACCT_TYPE VARCHAR2(10):= 'DEBIT';
    C_AMOUNT DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;

    CURSOR C_DEPOSIT_ACCT_TRANSACTION IS
        SELECT TRANSDATETIME, ACCTNO, AMOUNT
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE UPPER(TRANSTYPE)='DEBIT'
        AND TO_CHAR(TRANSDATETIME,'MMDDYYYY') = TO_CHAR(SYSDATE,'MMDDYYYY');

BEGIN
    OPEN C_DEPOSIT_ACCT_TRANSACTION;
    LOOP
        FETCH C_DEPOSIT_ACCT_TRANSACTION INTO C_TRANSDATETIME, C_ACCTNO, C_AMOUNT;
        EXIT WHEN C_DEPOSIT_ACCT_TRANSACTION%NOTFOUND;
        INSERT INTO TODAY_WITHDRAW VALUES(C_TRANSDATETIME, C_ACCTNO,C_ACCT_TYPE, C_AMOUNT);
    END LOOP;
    CLOSE C_DEPOSIT_ACCT_TRANSACTION;
END;
/

EXEC ADD_TODAYS_WITHDRAW;
--DELETE FROM TODAY_WITHDRAW;
SELECT * FROM TODAY_WITHDRAW;

--QUESTION 3
-- I WILL USE TIMESTAMP INSTEAD OF DATE DESCRIBED IN QUESTION THREE, AS IT PROVIDES MORE INFORMATION
CREATE TABLE TRANSACTION_LOG(
    FROM_ACCT VARCHAR2(11),
    TO_ACCT   VARCHAR2(11),
    AMOUNT    NUMBER,
    T_DATE    TIMESTAMP);

    
CREATE OR REPLACE PROCEDURE ACCT_TRANSFER(FROM_ACCT_PROC VARCHAR2,TO_ACCT_PROC VARCHAR2, PROC_AMOUNT NUMBER) AS
    PROC_DATE               TIMESTAMP:=SYSDATE;
    FROM_CHECK              DEPOSIT_ACCT%ROWTYPE;
    TO_CHECK                DEPOSIT_ACCT%ROWTYPE;
    E_CheckAcctNumsExist    EXCEPTION;
    E_AmountMustBePositive  EXCEPTION;

BEGIN
    SELECT * --to ensure that the account number exists AND throw error if not
    INTO FROM_CHECK
    FROM DEPOSIT_ACCT
    WHERE ACCTNO = FROM_ACCT_PROC;
    
    SELECT * -- same as above
    INTO TO_CHECK
    FROM DEPOSIT_ACCT
    WHERE ACCTNO = TO_ACCT_PROC;
    
    IF PROC_AMOUNT <= 0 THEN 
        RAISE E_AMOUNTMUSTBEPOSITIVE;
    END IF;

    UPDATE DEPOSIT_ACCT -- UPDATE THE SENDING ACCOUNT BY SUBTRACTING THE BALANCE
    SET BALANCE = BALANCE - PROC_AMOUNT
    WHERE ACCTNO = FROM_ACCT_PROC;
    
    UPDATE DEPOSIT_ACCT -- UPDATE THE RECIEVING ACCOUNT BY ADDING THE BALANCE
    SET BALANCE = BALANCE + PROC_AMOUNT
    WHERE ACCTNO = TO_ACCT_PROC;
    
    INSERT INTO TRANSACTION_LOG (FROM_ACCT,TO_ACCT, AMOUNT, T_DATE)
    VALUES(FROM_ACCT_PROC,TO_ACCT_PROC, PROC_AMOUNT, PROC_DATE); 
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Check your account numbers and try again.');
        --ROLLBACK;
    WHEN E_AMOUNTMUSTBEPOSITIVE THEN
        DBMS_OUTPUT.PUT_LINE('You can only transfer a positive amount.');       
END;
/
EXEC ACCT_TRANSFER('CDEP000001', 'CDEP000002', 20)
-- TEST FOR ERROR HANDLING ON INCORRECT ACCOUNT NUMBER
EXEC ACCT_TRANSFER('CDEP000001', 'CDEP000005', 20)
--TEST FOR ERROR WITH NEGATIVE AMOUNT
EXEC ACCT_TRANSFER('CDEP000001', 'CDEP000002', -20)

SELECT SYSDATE + 15 FROM DUAL;

--Question 4. 
CREATE TABLE B_C_FILE(
    FNAME      VARCHAR2(50),
    LNAME      VARCHAR2(50),
    STREET      VARCHAR2(50),
    CITY        VARCHAR2(50),
    STATE       VARCHAR2(2),
    ZIP         NUMBER,
    DOB         DATE);

INSERT INTO CUSTOMER (CUSTID,SSN,FNAME,LNAME,DOB,STREET,CITY,STATE,ZIP)
    VALUES(9900000004,555667777,'Joss', 'Whedons', '12-JUN-20', '123 Joshua Tree St.', 'Palm Springs', 'CA', 94321);

CREATE OR REPLACE PROCEDURE BIRTHDAY_SUB AS
    C_FNAME      CUSTOMER.FNAME%TYPE;
    C_LNAME      CUSTOMER.LNAME%TYPE;
    C_STREET     CUSTOMER.STREET%TYPE;
    C_CITY       CUSTOMER.CITY%TYPE;
    C_STATE      CUSTOMER.STATE%TYPE;
    C_ZIP        CUSTOMER.ZIP%TYPE;
    C_DOB        CUSTOMER.DOB%TYPE;
        
    CURSOR BDAY_IN_15DAYS IS
    SELECT FNAME, LNAME, STREET, CITY, STATE, ZIP, DOB
    FROM CUSTOMER
    WHERE DOB = TO_CHAR(SYSDATE + 15,'DD-MON-YY');

BEGIN
    OPEN BDAY_IN_15DAYS;
    LOOP
        FETCH BDAY_IN_15DAYS INTO C_FNAME, C_LNAME, C_STREET, C_CITY, C_STATE, C_ZIP, C_DOB;
        EXIT WHEN BDAY_IN_15DAYS%NOTFOUND;
        INSERT INTO B_C_FILE VALUES(C_FNAME, C_LNAME, C_STREET, C_CITY, C_STATE, C_ZIP, C_DOB);
    END LOOP;
    CLOSE BDAY_IN_15DAYS;
END;
/

EXEC BIRTHDAY_SUB;
SELECT * FROM B_C_FILE;

-- Question 5
CREATE OR REPLACE FUNCTION CUSTOMERINFO(ACCTNO_INPUT VARCHAR2) RETURN NUMBER AS
    TOTAL_DEPOSIT NUMBER;
BEGIN
    SELECT SUM(AMOUNT)
    INTO TOTAL_DEPOSIT
    FROM DEPOSIT_ACCT_TRANSACTION
    WHERE ACCTNO = ACCTNO_INPUT
    AND TRANSTYPE = 'CREDIT';
    IF TOTAL_DEPOSIT IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('No data has been found, check that your account number is correct.');
    END IF;
    RETURN TOTAL_DEPOSIT;
END;    
/

SELECT CUSTOMERINFO('CDEP000001') FROM DUAL;

-- Question 6
CREATE OR REPLACE FUNCTION CUSTOMERINFO(ACCTNO_INPUT VARCHAR2, DATE_INPUT VARCHAR2) RETURN NUMBER AS
    TOTAL_DEPOSIT NUMBER;
    INPUT_DATE    VARCHAR2(20);

BEGIN
    INPUT_DATE:=TO_CHAR(TO_DATE('03-DEC-19','DD-MM-YY'), 'DD-MM-YY');

    SELECT SUM(AMOUNT)
    INTO TOTAL_DEPOSIT
    FROM DEPOSIT_ACCT_TRANSACTION
    WHERE ACCTNO = ACCTNO_INPUT
    AND UPPER(TRANSTYPE) = 'CREDIT'
    AND INPUT_DATE = TO_CHAR(TRANSDATETIME,'DD-MM-YY');
    RETURN TOTAL_DEPOSIT;
    
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('PLEASE CHECK YOUR DATE IS FORMATTED AS DD-MON-YY LIKE 02-DEC-19');
            RETURN NULL;
END;    
/

SELECT CUSTOMERINFO('CDEP000001','03-DEC-19') FROM DUAL;
SELECT CUSTOMERINFO('CDEP000001','03/12/19') FROM DUAL;

-- Question 7

UPDATE DEPOSIT_ACCT
SET COOWNER = 9900000004
WHERE ACCTNO = 'CDEP000001';


CREATE OR REPLACE FUNCTION CUSTOMERINFO(PRIMARY_ACCT NUMBER, DATE_INPUT VARCHAR2, CO_OWNER_INPUT NUMBER) RETURN NUMBER AS
    TOTAL_DEPOSIT NUMBER;
    INPUT_DATE    VARCHAR2(20);
    ACCT_NUM      CHAR(10);

BEGIN
    INPUT_DATE:=TO_CHAR(TO_DATE('03-DEC-19','DD-MM-YY'), 'DD-MM-YY');

    SELECT ACCTNO
    INTO ACCT_NUM
    FROM DEPOSIT_ACCT
    WHERE PRIMARY = PRIMARY_ACCT
    AND COOWNER = CO_OWNER_INPUT;
    
    SELECT SUM(AMOUNT)
    INTO TOTAL_DEPOSIT
    FROM DEPOSIT_ACCT_TRANSACTION
    WHERE ACCTNO = ACCT_NUM
    AND UPPER(TRANSTYPE) = 'CREDIT'
    AND INPUT_DATE = TO_CHAR(TRANSDATETIME,'DD-MM-YY');
    RETURN TOTAL_DEPOSIT;
    
    
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('PLEASE CHECK YOUR DATE IS FORMATTED AS DD-MON-YY LIKE 02-DEC-19');
            RETURN NULL;
END;    
/

select customerinfo(9900000001, '03/12/19',9900000004) from dual;

--Question 8
CREATE OR REPLACE PROCEDURE LAST10(CUSTOMERID NUMBER) IS
    RETURNED_ROW    DEPOSIT_ACCT_TRANSACTION%ROWTYPE;
    ACCT_NUM        CHAR(10);
    
    CURSOR C_DEPOSIT_ACCT_TRANSACTION IS
        SELECT *
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM
        AND ROWNUM <= 10
        ORDER BY TRANSDATETIME DESC;

BEGIN
    SELECT ACCTNO
    INTO ACCT_NUM
    FROM DEPOSIT_ACCT
    WHERE PRIMARY = CUSTOMERID;

    OPEN C_DEPOSIT_ACCT_TRANSACTION;
    LOOP
        FETCH C_DEPOSIT_ACCT_TRANSACTION INTO RETURNED_ROW;
        EXIT WHEN C_DEPOSIT_ACCT_TRANSACTION%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(RETURNED_ROW.TRANSID||' '||RETURNED_ROW.ACCTNO||' '||RETURNED_ROW.TRANSTYPE||' '||
        RETURNED_ROW.TRANSDATETIME||' '||RETURNED_ROW.AMOUNT||' '||RETURNED_ROW.DESCRIPTION||' '||RETURNED_ROW.ACCESSPTID);
    END LOOP;
    CLOSE C_DEPOSIT_ACCT_TRANSACTION;

END;
/

EXEC LAST10(9900000001);

--Question 9
CREATE OR REPLACE PACKAGE BANKP AS
    FUNCTION CURRENT_BAL (CUSTOMER_ID NUMBER) RETURN NUMBER;
    FUNCTION LAST_DEPOSIT (CUSTOMER_ID NUMBER) RETURN NUMBER;
    FUNCTION LAST_SAVINGS_DEPOSIT (CUSTOMER_ID NUMBER) RETURN NUMBER;
    FUNCTION LAST_WITHDRAWAL (CUSTOMER_ID NUMBER) RETURN NUMBER;
    FUNCTION LAST_SAVINGS_WITHDRAWAL (CUSTOMER_ID NUMBER) RETURN NUMBER;  
END BANKP;
/
--CREATE PACKAGE BODY FOR BANKP
CREATE OR REPLACE PACKAGE BODY BANKP AS
--Q9 P1
    FUNCTION CURRENT_BAL (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        BALANCE_OUTPUT NUMBER;
    BEGIN
        SELECT BALANCE
        INTO BALANCE_OUTPUT
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'INTCK';
        RETURN BALANCE_OUTPUT;
    END;
    
    --Q9 P2
    FUNCTION LAST_DEPOSIT (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        ACCT_NUM        CHAR(10);
        R_TRANSID       DEPOSIT_ACCT_TRANSACTION.TRANSID%TYPE;
        R_ACCTNO        DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
        R_AMOUNT        DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;
        R_DESCRIPTION   DEPOSIT_ACCT_TRANSACTION.DESCRIPTION%TYPE;
        R_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
        
    BEGIN
        SELECT ACCTNO
        INTO ACCT_NUM
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'INTCK';
    
        SELECT TRANSID,ACCTNO,AMOUNT,DESCRIPTION, TRANSDATETIME
        INTO R_TRANSID,R_ACCTNO,R_AMOUNT,R_DESCRIPTION,R_TRANSDATETIME
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM 
        AND UPPER(TRANSTYPE) = 'CREDIT'
        AND TRANSDATETIME = (SELECT MAX(TRANSDATETIME) 
                            FROM DEPOSIT_ACCT_TRANSACTION
                            WHERE ACCTNO=ACCT_NUM
                            AND UPPER(TRANSTYPE) = 'CREDIT');
        DBMS_OUTPUT.PUT_LINE('TRANSID: '||R_TRANSID||' ACCTNO: '||R_ACCTNO||' AMOUNT: '||R_AMOUNT||' DESCRIPTION: '||R_DESCRIPTION||' TIME: '||R_TRANSDATETIME);
        RETURN R_AMOUNT;
    END;
    
    --Q9 P3
    FUNCTION LAST_SAVINGS_DEPOSIT (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        ACCT_NUM        CHAR(10);
        R_TRANSID       DEPOSIT_ACCT_TRANSACTION.TRANSID%TYPE;
        R_ACCTNO        DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
        R_AMOUNT        DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;
        R_DESCRIPTION   DEPOSIT_ACCT_TRANSACTION.DESCRIPTION%TYPE;
        R_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
        
    BEGIN
        SELECT ACCTNO
        INTO ACCT_NUM
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'SAVINGS';
    
        SELECT TRANSID,ACCTNO,AMOUNT,DESCRIPTION, TRANSDATETIME
        INTO R_TRANSID,R_ACCTNO,R_AMOUNT,R_DESCRIPTION,R_TRANSDATETIME
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM 
        AND UPPER(TRANSTYPE) = 'CREDIT'
        AND TRANSDATETIME = (SELECT MAX(TRANSDATETIME) 
                            FROM DEPOSIT_ACCT_TRANSACTION
                            WHERE ACCTNO=ACCT_NUM
                            AND UPPER(TRANSTYPE) = 'CREDIT');
        DBMS_OUTPUT.PUT_LINE('TRANSID: '||R_TRANSID||' ACCTNO: '||R_ACCTNO||' AMOUNT: '||R_AMOUNT||' DESCRIPTION: '||R_DESCRIPTION||' TIME: '||R_TRANSDATETIME);
        RETURN R_AMOUNT;
    END;

--Q9 P4
    FUNCTION LAST_WITHDRAWAL (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        ACCT_NUM        CHAR(10);
        R_TRANSID       DEPOSIT_ACCT_TRANSACTION.TRANSID%TYPE;
        R_ACCTNO        DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
        R_AMOUNT        DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;
        R_DESCRIPTION   DEPOSIT_ACCT_TRANSACTION.DESCRIPTION%TYPE;
        R_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
        
    BEGIN
        SELECT ACCTNO
        INTO ACCT_NUM
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'INTCK';
    
        SELECT TRANSID,ACCTNO,AMOUNT,DESCRIPTION,TRANSDATETIME
        INTO R_TRANSID,R_ACCTNO,R_AMOUNT,R_DESCRIPTION,R_TRANSDATETIME
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM 
        AND REGEXP_LIKE(DESCRIPTION,'WITHDRAWAL','i')
        AND TRANSDATETIME = (SELECT MAX(TRANSDATETIME) 
                            FROM DEPOSIT_ACCT_TRANSACTION
                            WHERE ACCTNO=ACCT_NUM
                            AND REGEXP_LIKE(DESCRIPTION,'WITHDRAWAL','i'));
        DBMS_OUTPUT.PUT_LINE('TRANSID: '||R_TRANSID||' ACCTNO: '||R_ACCTNO||' AMOUNT: '||R_AMOUNT||' DESCRIPTION: '||R_DESCRIPTION||' TIME: '||R_TRANSDATETIME);
        RETURN R_AMOUNT;
    END;
    
    --Q9 P5
    FUNCTION LAST_SAVINGS_WITHDRAWAL (CUSTOMER_ID NUMBER) RETURN NUMBER AS
        ACCT_NUM        CHAR(10);
        R_TRANSID       DEPOSIT_ACCT_TRANSACTION.TRANSID%TYPE;
        R_ACCTNO        DEPOSIT_ACCT_TRANSACTION.ACCTNO%TYPE;
        R_AMOUNT        DEPOSIT_ACCT_TRANSACTION.AMOUNT%TYPE;
        R_DESCRIPTION   DEPOSIT_ACCT_TRANSACTION.DESCRIPTION%TYPE;
        R_TRANSDATETIME DEPOSIT_ACCT_TRANSACTION.TRANSDATETIME%TYPE;
        
    BEGIN
        SELECT ACCTNO
        INTO ACCT_NUM
        FROM DEPOSIT_ACCT
        WHERE PRIMARY = CUSTOMER_ID
        AND UPPER(ACCTPRODID) = 'SAVINGS';
    
        SELECT TRANSID,ACCTNO,AMOUNT,DESCRIPTION,TRANSDATETIME
        INTO R_TRANSID,R_ACCTNO,R_AMOUNT,R_DESCRIPTION,R_TRANSDATETIME
        FROM DEPOSIT_ACCT_TRANSACTION
        WHERE ACCTNO = ACCT_NUM 
        AND REGEXP_LIKE(DESCRIPTION,'WITHDRAWAL','i')
        AND TRANSDATETIME = (SELECT MAX(TRANSDATETIME) 
                            FROM DEPOSIT_ACCT_TRANSACTION
                            WHERE ACCTNO=ACCT_NUM
                            AND REGEXP_LIKE(DESCRIPTION,'WITHDRAWAL','i'));
        DBMS_OUTPUT.PUT_LINE('TRANSID: '||R_TRANSID||' ACCTNO: '||R_ACCTNO||' AMOUNT: '||R_AMOUNT||' DESCRIPTION: '||R_DESCRIPTION||' TIME: '||R_TRANSDATETIME);
        RETURN R_AMOUNT;
    END;
END BANKP;
/

SELECT BANKP.CURRENT_BAL(9900000001) FROM DUAL;


SELECT * FROM DEPOSIT_ACCT_TRANSACTION;
SELECT * FROM TRANSACTION_LOG;
SELECT * FROM DEPOSIT_ACCT;
SELECT * FROM BRANCH_DRIVERS;
SELECT * FROM DRIVER;
SELECT * FROM BRANCH_PRODUCTIVITY_COST;
SELECT * FROM BRANCH_STATS;
SELECT * FROM BRANCH_DEPOSIT_TRANSACTIONS;
SELECT * FROM employee_info;
select * from intermediate_view;
select * from intermediate_TWO;
select * from branch_manager;
select * from branch;
SELECT * FROM CD_ACCOUNT;
SELECT * FROM DEPARTMENT;
SELECT * FROM DEPOSIT_ACCT_PRODUCT;
SELECT * FROM BRANCH_ACCESS_POINTS;
SELECT * FROM JOB;
select * from bank_employee;
select * from branch_employee;
select * from emp_annual_data;
SELECT * FROM BRANCH_SALARY_INFO;
SELECT * FROM EMPLOYEE_SALARY;
SELECT * FROM NUM_OF_BRANCH_EMPS;
SELECT * FROM ACCESS_POINT_TRANSACTION_TOTAL;
SELECT * FROM BRANCH_TRANSACTION_TOTAL;
SELECT * FROM BRANCH_INFO;
SELECT * FROM LOAN_PAYMENT;
SELECT * FROM LOAN;
SELECT * FROM CREDIT_ACCT_TRANSACTION;
SELECT * FROM CREDIT_ACCOUNT;
SELECT * FROM CUSTOMER;

--cr86trTqAU3DViG