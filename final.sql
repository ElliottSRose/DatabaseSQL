set serveroutput on;
set autocommit on;

--1.	BRANCH
CREATE TABLE BRANCH     
AS
SELECT 	*
FROM		PROJECT2020.BRANCH;

SELECT * 
FROM project2020.BRANCH;
;

DESC BRANCH;

update branch
set branchid = 1001
where branchid = 12345679;

update branch
set branch_manager_id = 1000000002
where branchid = 1001;

update branch
set branchid = 1002
where branchid = 12345678;

update branch
set branch_manager_id = 1000000004
where branchid = 1002;

update branch
set branchid = 1000
where branchid = 12345666;

update branch
set branch_manager_id = 1000000001
where branchid = 1000;
--2.	DEPARTMENT
CREATE TABLE DEPARTMENT
AS
SELECT 	*
FROM		PROJECT2020.DEPARTMENT;

SELECT * 
FROM DEPARTMENT;

DESC DEPARTMENT;

--3.	CAR
CREATE TABLE car
AS
SELECT 	*
FROM		PROJECT2020.car;

SELECT * 
FROM car;

DESC car;

--4.	DRIVER
CREATE TABLE DRIVER
AS
SELECT 	*
FROM		PROJECT2020.DRIVER;

SELECT * 
FROM DRIVER;

DESC DRIVER;

--5.	CUSTOMER
CREATE TABLE CUSTOMER
AS
SELECT 	* 
FROM		PROJECT2020.CUSTOMER;

SELECT * 
FROM CUSTOMER;

DESC CUSTOMER;

--6.	BANK_EMPLOYEE
CREATE TABLE BANK_EMPLOYEE
AS
SELECT 	*
FROM		PROJECT2020.BANK_EMPLOYEE;

SELECT * 
FROM BANK_EMPLOYEE;

DESC BANK_EMPLOYEE;

--7.	JOB
CREATE TABLE JOB
AS
SELECT 	*
FROM		PROJECT2020.JOB;

SELECT * 
FROM JOB;

DESC JOB;

--8.	EMP_ANNUAL_DATA
CREATE TABLE EMP_ANNUAL_DATA
AS
SELECT 	*
FROM		PROJECT2020.EMP_ANNUAL_DATA;

SELECT * 
FROM EMP_ANNUAL_DATA;

DESC EMP_ANNUAL_DATA;

--9.	BRANCH_EMPLOYEE
CREATE TABLE BRANCH_EMPLOYEE
AS
SELECT 	*
FROM		PROJECT2020.BRANCH_EMPLOYEE;

SELECT * 
FROM BRANCH_EMPLOYEE;

DESC BRANCH_EMPLOYEE;

--10.	ATM
CREATE TABLE ATM
AS
SELECT 	*
FROM		PROJECT2020.ATM;

SELECT * 
FROM ATM;

DESC ATM;

--11.	BRANCH_ACCESS_POINTS
CREATE TABLE BRANCH_ACCESS_POINTS
AS
SELECT 	*
FROM		PROJECT2020.BRANCH_ACCESS_POINTS;

SELECT * 
FROM BRANCH_ACCESS_POINTS;

DESC BRANCH_ACCESS_POINTS;

--12.	BRANCH_MANAGER
CREATE TABLE BRANCH_MANAGER
AS
SELECT 	*
FROM		PROJECT2020.BRANCH_MANAGER;

SELECT * 
FROM BRANCH_MANAGER;

DESC BRANCH_MANAGER;
ALTER TABLE BRANCH_MANAGER
    ADD(MANAGER_NAME VARCHAR2(60));
/
UPDATE BRANCH_MANAGER
SET BRANCH_MANAGER.MANAGER_NAME = (SELECT FNAME || ' ' || LNAME 
                    FROM BANK_EMPLOYEE
                    WHERE EMPID=BRANCH_MANAGER.EMPID);
/
SELECT * FROM BRANCH_MANAGER;
--13.	LOAN
CREATE TABLE LOAN
AS
SELECT 	*
FROM		PROJECT2020.LOAN;

SELECT * 
FROM LOAN;

DESC LOAN;

--14.	LOAN_PRODUCT
CREATE TABLE LOAN_PRODUCT
AS
SELECT 	*
FROM		PROJECT2020.LOAN_PRODUCT;

SELECT * 
FROM LOAN_PRODUCT;

DESC LOAN_PRODUCT;

--15.	DEPOSIT_ACCT
CREATE TABLE DEPOSIT_ACCT
AS
SELECT 	*
FROM		PROJECT2020.DEPOSIT_ACCT;

SELECT * 
FROM DEPOSIT_ACCT;

DESC DEPOSIT_ACCT;

--16.	DEPOSIT_ACC_PRODUCT
CREATE TABLE DEPOSIT_ACCT_PRODUCT
AS
SELECT 	*
FROM		PROJECT2020.DEPOSIT_ACCT_PRODUCT;

SELECT * 
FROM DEPOSIT_ACCT_PRODUCT;

DESC DEPOSIT_ACCT_PRODUCT;

--17.	CD_ACCOUNT
CREATE TABLE CD_ACCOUNT
AS
SELECT 	*
FROM		PROJECT2020.CD_ACCOUNT;

SELECT * 
FROM CD_ACCOUNT;

DESC CD_ACCOUNT;

--18.	CD_PRODUCT
CREATE TABLE CD_PRODUCT
AS
SELECT 	*
FROM		PROJECT2020.CD_PRODUCT;

SELECT * 
FROM CD_PRODUCT;

DESC CD_PRODUCT;

--19.	CREDIT_ACCOUNT
CREATE TABLE CREDIT_ACCOUNT
AS
SELECT 	*
FROM		PROJECT2020.CREDIT_ACCOUNT;

SELECT * 
FROM CREDIT_ACCOUNT;

DESC CREDIT_ACCOUNT;

--20.	CREDIT_PRODUCT
CREATE TABLE CREDIT_PRODUCT
AS
SELECT 	*
FROM		PROJECT2020.CREDIT_PRODUCT;

SELECT * 
FROM CREDIT_PRODUCT;

DESC CREDIT_PRODUCT;

--21.	LOAN_PAYMENT
CREATE TABLE LOAN_PAYMENT
AS
SELECT 	*
FROM		PROJECT2020.LOAN_PAYMENT;

SELECT * 
FROM LOAN_PAYMENT;

DESC LOAN_PAYMENT;

--22.	DEPOSIT_ACCT_TRANSACTION
CREATE TABLE DEPOSIT_ACCT_TRANSACTION
AS
SELECT 	*
FROM		PROJECT2020.DEPOSIT_ACCT_TRANSACTION;

SELECT * 
FROM DEPOSIT_ACCT_TRANSACTION;

DESC DEPOSIT_ACCT_TRANSACTION;

--23.	CREDIT_ACCT_TRASACTION
CREATE TABLE CREDIT_ACCT_TRANSACTION
AS
SELECT 	*
FROM		PROJECT2020.CREDIT_ACCT_TRANSACTION;

SELECT * 
FROM CREDIT_ACCT_TRANSACTION;

DESC CREDIT_ACCT_TRANSACTION;

SELECT table_name FROM ALL_TABLES;
--DROP TABLE ATM CASCADE CONSTRAINTS PURGE;

-- create views
CREATE OR REPLACE VIEW INTERMEDIATE_VIEW AS
    SELECT A.BRANCHID, A.B_NAME, 
    A.BRANCHPHONE, B.MANAGER_NAME
    FROM BRANCH A, BRANCH_MANAGER B
    WHERE A.BRANCHID=B.BRANCHID;
    
create or replace VIEW intermediate_two as
    SELECT A.EMPID, B.*
    FROM BRANCH_EMPLOYEE A, INTERMEDIATE_VIEW B
    WHERE A.BRANCHID = B.BRANCHID;
    
CREATE OR REPLACE VIEW CURRENT_EVAL_AND_PAY AS -- to grab the most current salary from the year over year reviews in emp_annual_data
    SELECT *
    FROM (SELECT
          EMPID, SALARY, EVALUATION, TAXDEDUCTION, YEAR, 
          MAX(YEAR) OVER (PARTITION BY EMPID) MOST_RECENT
          FROM EMP_ANNUAL_DATA)
    WHERE YEAR = MOST_RECENT;

CREATE or REPLACE VIEW EMPLOYEE_INFO AS
    SELECT EMPID EMPID,
    A.FNAME || ' ' || A.LNAME EMP_EMPLOYEE_NAME,
    A.STREET || ' ' || A.CITY || ' ' || A.STATE EMP_ADDRESS,
    A.ZIP EMP_ZIP,
    A.SSN EMP_SSN,
    A.JOBTITLE EMP_JOB_TITLE,
    C.TAXDEDUCTION EMP_TAX_DEDUCTION,
    A.HIREDATE EMP_HIRE_DATE,
    TO_CHAR(A.DOB,'MM-DD-YYYY') EMP_BIRTHDAY,
    FLOOR((SYSDATE-A.DOB)/365.25) EMP_AGE,
    B.PHONEEXT EMP_PHONE_EXT,
    C.SALARY EMP_SALARY,
    D.BRANCHPHONE EMP_BRANCHPHONE,
    D.B_NAME EMP_BRANCH_NAME,
    A.DEGREE EMP_HIGHEST_DEGREE, 
    A.DEGREEDATE EMP_HIGHEST_DEGREE_DATE,
    D.MANAGER_NAME BRANCH_MANAGER
    FROM BANK_EMPLOYEE A 
    left join BRANCH_EMPLOYEE B 
        using (empid)
    LEFT JOIN CURRENT_EVAL_AND_PAY C
        USING (EMPID)
    LEFT JOIN INTERMEDIATE_TWO D
     USING(EMPID);
    
    
-- view employee_salary
--for more interesting data, I'm adding the following salaries
UPDATE JOB
SET MINSALARY = 50000
WHERE JOBTITLE = 'Branch Manager';

UPDATE JOB
SET MINSALARY = 30000
WHERE JOBTITLE = 'Teller';

UPDATE JOB
SET MINSALARY = 42000
WHERE JOBTITLE = 'Staff Manager';

UPDATE JOB
SET MINSALARY = 60000
WHERE JOBTITLE = 'Loan Officer';

INSERT ALL 
        INTO EMP_ANNUAL_DATA(EMPID,YEAR,SALARY,EVALUATION,TAXDEDUCTION) VALUES (1000000001,2020,50000,NULL,1)
        INTO EMP_ANNUAL_DATA(EMPID,YEAR,SALARY,EVALUATION,TAXDEDUCTION) VALUES (1000000002,2020,50000,NULL,1)
        INTO EMP_ANNUAL_DATA(EMPID,YEAR,SALARY,EVALUATION,TAXDEDUCTION) VALUES (1000000004,2020,50000,NULL,2)
        INTO EMP_ANNUAL_DATA(EMPID,YEAR,SALARY,EVALUATION,TAXDEDUCTION) VALUES (1000000006,2020,60000,NULL,1)
        INTO EMP_ANNUAL_DATA(EMPID,YEAR,SALARY,EVALUATION,TAXDEDUCTION) VALUES (1000000007,2020,420000,NULL,1)
        INTO EMP_ANNUAL_DATA(EMPID,YEAR,SALARY,EVALUATION,TAXDEDUCTION) VALUES (1000000008,2020,60000,NULL,2)
        INTO EMP_ANNUAL_DATA(EMPID,YEAR,SALARY,EVALUATION,TAXDEDUCTION) VALUES (1000000009,2020,42000,NULL,1)
SELECT * FROM DUAL;

UPDATE EMP_ANNUAL_DATA
SET SALARY = 42000
WHERE EMPID = 1000000007;


CREATE OR REPLACE VIEW BRANCH_SALARY_INFO AS
    SELECT EMP_BRANCH_NAME, FLOOR(MAX(EMP_SALARY)) BRANCH_HIGHEST_SALARY,FLOOR(AVG(EMP_SALARY)) BRANCH_AVERAGE_SALARY, SUM(EMP_SALARY) BRANCH_SALARY_TOTAL
    FROM EMPLOYEE_INFO
    WHERE EMP_BRANCH_NAME IS NOT NULL
    GROUP BY EMP_BRANCH_NAME;
    
CREATE OR REPLACE VIEW EMPLOYEE_SALARY AS
    SELECT A.EMP_EMPLOYEE_NAME NAME,
    A.EMP_ADDRESS,
    A.EMP_ZIP EMP_ZIP,
    A.EMP_SSN EMP_SSN,
    B.TAXDEDUCTION EMP_TAXDEDUCTION,
    A.EMP_BIRTHDAY DOB,
    A.EMP_BRANCH_NAME EMP_BRANCH_NAME,
    C.BRANCH_SALARY_TOTAL, 
    C.BRANCH_HIGHEST_SALARY,
    C.BRANCH_AVERAGE_SALARY
    FROM EMPLOYEE_INFO A
    LEFT JOIN CURRENT_EVAL_AND_PAY B
        USING (EMPID)
    LEFT JOIN BRANCH_SALARY_INFO C
        ON A.EMP_BRANCH_NAME = C.EMP_BRANCH_NAME
;

-- PART C CREATE BRANCH_INFO VIEW

--FILL IN BRANCH TABLE WITH MORE DETAILS ABOUT THE BRANCH (LEAVE FAX EMPTY FOR FUTURE INPUT)
ALTER TABLE BRANCH
ADD(FAX NUMBER, 
    HOURS VARCHAR2(10), 
    OPEN_DAYS VARCHAR2(10), 
    CATEGORY VARCHAR2(10));
    
UPDATE BRANCH
SET HOURS = '9AM-5PM';

UPDATE BRANCH
SET OPEN_DAYS = 'MON-FRI';

UPDATE BRANCH
SET CATEGORY = 'SATELLITE';

UPDATE BRANCH
SET CATEGORY = 'MAIN'
WHERE BRANCHID=1002;

CREATE OR REPLACE VIEW NUM_OF_BRANCH_EMPS AS
    SELECT BRANCHID, COUNT(EMPID) NUM_OF_EMPS
    FROM BRANCH_EMPLOYEE
    GROUP BY BRANCHID;

CREATE OR REPLACE VIEW ACCESS_POINT_TRANSACTION_TOTAL AS
    SELECT ACCESSPTID, COUNT(ACCESSPTID) NUM_OF_TRANS
    FROM DEPOSIT_ACCT_TRANSACTION
    GROUP BY ACCESSPTID;

CREATE OR REPLACE VIEW BRANCH_TRANSACTION_TOTAL AS
    SELECT BRANCHID, SUM(NUM_OF_TRANS) TOTAL_TRANSACTIONS FROM 
    (SELECT * FROM BRANCH_ACCESS_POINTS A LEFT JOIN ACCESS_POINT_TRANSACTION_TOTAL B
    ON A.ACCESSPOINTID = B.ACCESSPTID)
    GROUP BY BRANCHID;

CREATE OR REPLACE VIEW BRANCH_INFO AS
        SELECT BRANCHID,
        A.B_NAME NAME,
        A.B_ST || ' ' || A.B_CITY || ' ' ||A.B_STATE|| ' ' || A.B_ZIP ADDRESS,
        A.BRANCHPHONE,
        A.FAX, 
        B.NUM_OF_EMPS, 
        A.HOURS,
        A.OPEN_DAYS,
        A.CATEGORY,
        C.MANAGER_NAME,
        D.TOTAL_TRANSACTIONS
        FROM BRANCH A LEFT JOIN 
        NUM_OF_BRANCH_EMPS B 
            USING(BRANCHID)
        LEFT JOIN BRANCH_MANAGER C
            USING(BRANCHID)
        LEFT JOIN BRANCH_TRANSACTION_TOTAL D
            USING(BRANCHID);

-- D. VALUED CUSTOMERS VIEW
ALTER TABLE CUSTOMER
ADD(EMAIL VARCHAR2(60))
;

CREATE OR REPLACE VIEW LOAN_TRANSACTIONS_2019 AS
    SELECT A.PRIMARY, LOANNO, B.NUM_OF_LOAN_TRANS, B.TOTAL_DOLLAR_AMT 
    FROM LOAN A LEFT JOIN 
        (SELECT LOANNO, COUNT(LOANNO) NUM_OF_LOAN_TRANS, SUM(PAYAMT) TOTAL_DOLLAR_AMT
            FROM LOAN_PAYMENT 
            WHERE EXTRACT(YEAR FROM TRANSDATETIME) = 2019 
            GROUP BY LOANNO) B
    USING(LOANNO);

CREATE OR REPLACE VIEW DEPOSIT_TRANSACTIONS_2019 AS
    SELECT A.PRIMARY, ACCTNO, B.NUM_OF_DEPOSIT_TRANS, B.TOTAL_DOLLAR_AMT 
    FROM DEPOSIT_ACCT A LEFT JOIN 
        (SELECT ACCTNO, COUNT(ACCTNO) NUM_OF_DEPOSIT_TRANS, SUM(AMOUNT) TOTAL_DOLLAR_AMT
            FROM DEPOSIT_ACCT_TRANSACTION 
            WHERE EXTRACT(YEAR FROM TRANSDATETIME) = 2019 
            GROUP BY ACCTNO) B
    USING(ACCTNO);
    
CREATE OR REPLACE VIEW CREDIT_TRANSACTIONS_2019 AS
    SELECT A.PRIMARY, CREDITACCTNO, B.NUM_OF_CREDIT_TRANS, B.TOTAL_DOLLAR_AMT
    FROM CREDIT_ACCOUNT A LEFT JOIN 
        (SELECT CREDITACCTNO, COUNT(CREDITACCTNO) NUM_OF_CREDIT_TRANS, SUM(AMOUNT) TOTAL_DOLLAR_AMT
            FROM CREDIT_ACCT_TRANSACTION 
            WHERE EXTRACT(YEAR FROM TRANSDATETIME) = 2019 
            GROUP BY CREDITACCTNO) B
    USING(CREDITACCTNO);

CREATE OR REPLACE VIEW TRANSACTION_TOTAL_2019 AS
    SELECT PRIMARY,
    SUM((NVL(A.NUM_OF_LOAN_TRANS,0) + NVL(B.NUM_OF_DEPOSIT_TRANS,0) + NVL(C.NUM_OF_CREDIT_TRANS,0))) AS TOTAL_TRANSACTIONS_2019,
    SUM((NVL(A.TOTAL_DOLLAR_AMT,0) + NVL(B.TOTAL_DOLLAR_AMT,0) + NVL(C.TOTAL_DOLLAR_AMT,0))) AS TOTAL_TRANS_DOLLARS_2019   
    FROM LOAN_TRANSACTIONS_2019 A LEFT JOIN DEPOSIT_TRANSACTIONS_2019 B
        USING(PRIMARY)
    LEFT JOIN CREDIT_TRANSACTIONS_2019 C
        USING(PRIMARY)
    GROUP BY PRIMARY;

CREATE OR REPLACE VIEW VALUED_CUSTOMERS AS 
    SELECT A.SSN,
        A.FNAME || ' ' || A.LNAME NAME,
        FLOOR((SYSDATE-A.DOB)/365.25) AGE,
        A.HOMEPHONE, 
        A.WORKPHONE,
        A.STREET STREET_ADDRESS,
        A.ZIP, 
        A.EMAIL,
        B.TOTAL_TRANSACTIONS_2019, 
        B.TOTAL_TRANS_DOLLARS_2019
        FROM CUSTOMER A LEFT JOIN TRANSACTION_TOTAL_2019 B
            ON PRIMARY = B.PRIMARY;

SELECT * FROM CREDIT_TRANSACTIONS_2019;
SELECT * FROM LOAN_TRANSACTIONS_2019;        
SELECT * FROM DEPOSIT_TRANSACTIONS_2019;
SELECT * FROM TRANSACTION_TOTAL_2019;
SELECT * FROM VALUED_CUSTOMERS;

-- E. Statistics by Branch (read only)

CREATE OR REPLACE VIEW BRANCH_DEPOSIT_TRANSACTIONS AS
    SELECT A.BRANCHID, SUM(NVL(B.NUM_OF_DEPOSIT_TRANS,0)) NUM_OF_DEPOSIT_TRANS, SUM(NVL(B.TOTAL_DOLLAR_AMT,0)) TOTAL_DOLLAR_AMT
    FROM BRANCH_ACCESS_POINTS A LEFT JOIN 
        (SELECT ACCESSPTID, COUNT(TRANSTYPE) NUM_OF_DEPOSIT_TRANS ,SUM(AMOUNT) TOTAL_DOLLAR_AMT
            FROM DEPOSIT_ACCT_TRANSACTION 
            WHERE EXTRACT(YEAR FROM TRANSDATETIME) = 2020
            GROUP BY ACCESSPTID) B
    ON A.ACCESSPOINTID = B.ACCESSPTID
    GROUP BY BRANCHID;

CREATE OR REPLACE VIEW BRANCH_STATS AS
    SELECT BRANCHID,
        A.NAME BRANCH_NAME, 
        TO_CHAR(SYSDATE, 'YYYY') CURRENT_YEAR,
        B.NUM_OF_DEPOSIT_TRANS DEPOSIT_TRANSACTIONS_2020, 
        C.TOTAL_TRANSACTIONS, 
        D.NUM_OF_EMPS
        FROM BRANCH_INFO A LEFT JOIN BRANCH_DEPOSIT_TRANSACTIONS B
            USING(BRANCHID)
        LEFT JOIN BRANCH_TRANSACTION_TOTAL C
            USING(BRANCHID)
        LEFT JOIN NUM_OF_BRANCH_EMPS D
            USING(BRANCHID)
        WITH READ ONLY;
        
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000001', 'DEBIT', SYSDATE, 30, 'teller withdrawal','T000001');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(2, 'CDEP000001', 'CREDIT', SYSDATE, 62, 'teller deposit','T000001');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(4, 'CDEP000001', 'DEBIT', SYSDATE, 80, 'atm withdrawal','A000001');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000002', 'credit', SYSDATE, 30, 'atm deposit','A000002');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'DEBIT', SYSDATE, 100, 'atm withdrawal','A000003');
INSERT INTO DEPOSIT_ACCT_TRANSACTION VALUES(1, 'CDEP000003', 'DEBIT', SYSDATE, 300, 'atm withdrawal','A000002');

-- CREATE TWO USEFUL CUSTOMER VIEWS

CREATE OR REPLACE VIEW LOAN_HISTORY_CL0000002 AS
    SELECT * FROM LOAN_PAYMENT
    WHERE LOANNO = 'CL0000002';
    
SELECT * FROM LOAN_HISTORY_CL0000002;
    
CREATE OR REPLACE VIEW CREDIT_ACCT_HISTORY_CCR0000002 AS
    SELECT * FROM CREDIT_ACCT_TRANSACTION
    WHERE CREDITACCTNO = 'CCR0000002';
    
SELECT * FROM CREDIT_ACCT_HISTORY_CCR0000002;
    
--CREATE TWO VIEWS FOR MANAGERIAL DECISIONS

CREATE OR REPLACE VIEW BRANCH_PRODUCTIVITY_COST AS
    SELECT A.*,
            B.BRANCH_HIGHEST_SALARY,
            B.BRANCH_AVERAGE_SALARY,
            B.BRANCH_SALARY_TOTAL
    FROM BRANCH_STATS A LEFT JOIN
    BRANCH_SALARY_INFO B
    ON A.BRANCH_NAME = B.EMP_BRANCH_NAME;
SELECT * FROM BRANCH_PRODUCTIVITY_COST;

CREATE OR REPLACE VIEW BRANCH_DRIVERS AS
    SELECT A.*,
        B.LICENSENO,
        B.STATEOFISSUE,
        B.EXPDATE
        FROM BRANCH_EMPLOYEE A LEFT JOIN
        DRIVER B
        ON A.EMPID=B.EMPID;
        
CREATE SEQUENCE ID_GENERATOR
START WITH 1001
INCREMENT BY 2 
CACHE 50;

CREATE SEQUENCE TRANSACTION_ID
START WITH 0000000001
INCREMENT BY 1;


SELECT * FROM BRANCH_DRIVERS;
SELECT * FROM DRIVER;
SELECT * FROM BRANCH_PRODUCTIVITY_COST;
SELECT * FROM BRANCH_STATS;
SELECT* FROM BRANCH_DEPOSIT_TRANSACTIONS;
SELECT * FROM employee_info;
select * from intermediate_view;
select * from intermediate_TWO;
select * from branch_manager;
select * from branch;
SELECT * FROM CD_ACCOUNT;
SELECT * FROM DEPARTMENT;
SELECT * FROM DEPOSIT_ACCT_PRODUCT;
SELECT * FROM BRANCH_ACCESS_POINTS;
SELECT * FROM JOB;
select * from bank_employee;
select * from branch_employee;
select * from emp_annual_data;
SELECT * FROM BRANCH_SALARY_INFO;
SELECT * FROM EMPLOYEE_SALARY;
SELECT * FROM NUM_OF_BRANCH_EMPS;
SELECT * FROM ACCESS_POINT_TRANSACTION_TOTAL;
SELECT * FROM BRANCH_TRANSACTION_TOTAL;
SELECT * FROM BRANCH_INFO;
SELECT * FROM LOAN_PAYMENT;
SELECT * FROM LOAN;
SELECT * FROM DEPOSIT_ACCT_TRANSACTION;
SELECT * FROM DEPOSIT_ACCT;
SELECT * FROM CREDIT_ACCT_TRANSACTION;
SELECT * FROM CREDIT_ACCOUNT;
SELECT * FROM CUSTOMER;

--cr86trTqAU3DViG